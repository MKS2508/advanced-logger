name: Full Release Pipeline with Gemini AI

on:
  workflow_dispatch:
    inputs:
      use_gemini:
        description: 'Usar Gemini AI para versionado inteligente'
        required: false
        default: true
        type: boolean
      release_type:
        description: 'Tipo de release (solo si no usar Gemini)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - alpha
          - beta
          - stable
      target_registry:
        description: 'Registro objetivo'
        required: false
        default: 'both'
        type: choice
        options:
          - npm
          - github
          - both
      skip_tests:
        description: 'Saltar tests (no recomendado)'
        required: false
        default: false
        type: boolean
      force_release:
        description: 'Forzar release aunque no haya cambios significativos'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # ===== INTELLIGENT VERSIONING WITH GEMINI =====
  gemini-analysis:
    runs-on: ubuntu-latest
    if: ${{ inputs.use_gemini }}
    
    outputs:
      should_release: ${{ steps.analysis.outputs.should_release }}
      version_type: ${{ steps.analysis.outputs.version_type }}
      changelog: ${{ steps.analysis.outputs.changelog }}
      release_notes: ${{ steps.analysis.outputs.release_notes }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm run ci:install

      - name: 🤖 Run Gemini AI Analysis
        id: analysis
        run: |
          echo "🤖 Ejecutando análisis inteligente con Gemini..."
          
          # Usar project-utils auto-release con Gemini
          npm run release:auto
          
          # Verificar si se debe hacer release
          if [ -f "project-utils/.temp/gemini-response.md" ]; then
            # Extraer información del análisis de Gemini
            SHOULD_RELEASE=$(grep -o "should_release: [a-zA-Z]*" project-utils/.temp/gemini-response.md | cut -d' ' -f2 || echo "true")
            VERSION_TYPE=$(grep -o "version_type: [a-zA-Z]*" project-utils/.temp/gemini-response.md | cut -d' ' -f2 || echo "patch")
            
            echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            
            # Extraer changelog y release notes si existen
            if [ -f "project-utils/.temp/commit-proposal"*".md" ]; then
              CHANGELOG=$(head -n 10 project-utils/.temp/commit-proposal*.md | base64 -w 0)
              echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
            fi
            
            echo "🤖 Análisis completado: should_release=$SHOULD_RELEASE, version_type=$VERSION_TYPE"
          else
            # Fallback si no hay respuesta de Gemini
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "⚠️ No se encontró respuesta de Gemini, usando valores por defecto"
          fi

      - name: 📤 Upload Gemini artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gemini-analysis
          path: project-utils/.temp/
          retention-days: 7

  # ===== PREPARE RELEASE =====
  prepare-full-release:
    runs-on: ubuntu-latest
    needs: gemini-analysis
    if: always() && (needs.gemini-analysis.outputs.should_release == 'true' || inputs.force_release || !inputs.use_gemini)
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_channel: ${{ steps.version.outputs.release_channel }}
      changelog: ${{ steps.version.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm run ci:install

      - name: 🧪 Run tests (unless skipped)
        if: ${{ !inputs.skip_tests }}
        run: |
          npm run type-check
          npm run ci:test

      - name: 🏷️ Generate version with AI or manual
        id: version
        run: |
          if [ "${{ inputs.use_gemini }}" == "true" ]; then
            # Usar resultado de Gemini
            VERSION_TYPE="${{ needs.gemini-analysis.outputs.version_type }}"
            echo "🤖 Usando tipo de versión de Gemini: $VERSION_TYPE"
          else
            # Usar input manual
            VERSION_TYPE="${{ inputs.release_type }}"
            echo "👤 Usando tipo de versión manual: $VERSION_TYPE"
          fi
          
          # Aplicar versionado según el tipo determinado
          case "$VERSION_TYPE" in
            "auto")
              npm run version:auto
              ;;
            "patch")
              npm run version:patch
              ;;
            "minor")
              npm run version:minor
              ;;
            "major")
              npm run version:major
              ;;
            "alpha")
              npm run version:alpha
              ;;
            "beta")
              npm run version:beta
              ;;
            "stable")
              npm run version:stable
              ;;
          esac
          
          # Obtener nueva versión del package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Determinar si es prerelease y canal
          if [[ "$NEW_VERSION" == *"alpha"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_channel=alpha" >> $GITHUB_OUTPUT
          elif [[ "$NEW_VERSION" == *"beta"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT  
            echo "release_channel=beta" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_channel=latest" >> $GITHUB_OUTPUT
          fi
          
          echo "📦 Nueva versión: $NEW_VERSION"

      - name: 📝 Generate enhanced changelog
        id: changelog
        run: |
          if [ "${{ inputs.use_gemini }}" == "true" ] && [ "${{ needs.gemini-analysis.outputs.changelog }}" != "" ]; then
            # Usar changelog de Gemini si existe
            echo "📋 Usando changelog generado por Gemini AI..."
            CHANGELOG=$(echo "${{ needs.gemini-analysis.outputs.changelog }}" | base64 -d)
          else
            # Generar changelog tradicional
            echo "📋 Generando changelog tradicional..."
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
            else
              CHANGELOG="- Initial release with complete Better Logger functionality"
            fi
          fi
          
          # Guardar changelog en archivo
          echo "$CHANGELOG" > RELEASE_CHANGELOG.md
          echo "changelog=$(echo "$CHANGELOG" | base64 -w 0)" >> $GITHUB_OUTPUT
          echo "📋 Changelog generado exitosamente"

      - name: 🏗️ Build all modules
        run: npm run build:all

      - name: 📊 Generate bundle analysis
        run: |
          echo "## 📦 Bundle Analysis" > BUNDLE_ANALYSIS.md
          echo "### Full Build" >> BUNDLE_ANALYSIS.md
          echo "\`\`\`" >> BUNDLE_ANALYSIS.md
          ls -lh dist/*.js dist/*.cjs | grep -E '\.(js|cjs)$' >> BUNDLE_ANALYSIS.md
          echo "\`\`\`" >> BUNDLE_ANALYSIS.md
          echo "" >> BUNDLE_ANALYSIS.md
          
          echo "### Modular Builds" >> BUNDLE_ANALYSIS.md
          for module in core styling exports; do
            if [ -d "dist/modular/$module" ]; then
              echo "#### $module Module" >> BUNDLE_ANALYSIS.md
              echo "\`\`\`" >> BUNDLE_ANALYSIS.md
              ls -lh dist/modular/$module/*.js dist/modular/$module/*.cjs 2>/dev/null | grep -E '\.(js|cjs)$' >> BUNDLE_ANALYSIS.md
              echo "\`\`\`" >> BUNDLE_ANALYSIS.md
            fi
          done

      - name: 📤 Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: full-release-${{ steps.version.outputs.version }}
          path: |
            dist/
            RELEASE_CHANGELOG.md
            BUNDLE_ANALYSIS.md
          retention-days: 30

  # ===== PUBLISH TO NPM =====
  publish-npm-full:
    runs-on: ubuntu-latest
    needs: prepare-full-release
    if: ${{ inputs.target_registry == 'npm' || inputs.target_registry == 'both' }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📥 Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: full-release-${{ needs.prepare-full-release.outputs.version }}

      - name: 🔄 Update package version
        run: npm version ${{ needs.prepare-full-release.outputs.version }} --no-git-tag-version

      - name: 🚀 Publish to NPM
        run: |
          if [ "${{ needs.prepare-full-release.outputs.is_prerelease }}" == "true" ]; then
            echo "📦 Publishing prerelease to NPM with tag: ${{ needs.prepare-full-release.outputs.release_channel }}"
            npm publish --access public --tag ${{ needs.prepare-full-release.outputs.release_channel }}
          else
            echo "📦 Publishing stable release to NPM"
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ===== PUBLISH TO GITHUB PACKAGES =====
  publish-github-full:
    runs-on: ubuntu-latest
    needs: prepare-full-release
    if: ${{ inputs.target_registry == 'github' || inputs.target_registry == 'both' }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'

      - name: 📥 Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: full-release-${{ needs.prepare-full-release.outputs.version }}

      - name: 🔄 Update package version
        run: npm version ${{ needs.prepare-full-release.outputs.version }} --no-git-tag-version

      - name: 📦 Publish to GitHub Packages
        run: |
          if [ "${{ needs.prepare-full-release.outputs.is_prerelease }}" == "true" ]; then
            echo "📦 Publishing prerelease to GitHub Packages with tag: ${{ needs.prepare-full-release.outputs.release_channel }}"
            npm publish --access public --tag ${{ needs.prepare-full-release.outputs.release_channel }}
          else
            echo "📦 Publishing stable release to GitHub Packages" 
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== CREATE COMPREHENSIVE GITHUB RELEASE =====
  create-comprehensive-release:
    runs-on: ubuntu-latest
    needs: [gemini-analysis, prepare-full-release, publish-npm-full, publish-github-full]
    if: always() && needs.prepare-full-release.result == 'success'
    
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: 📥 Checkout code  
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: full-release-${{ needs.prepare-full-release.outputs.version }}

      - name: 📥 Download Gemini artifacts (if available)
        uses: actions/download-artifact@v4
        if: needs.gemini-analysis.result == 'success'
        with:
          name: gemini-analysis
          path: gemini-temp/

      - name: 📦 Create comprehensive release archives
        run: |
          VERSION=${{ needs.prepare-full-release.outputs.version }}
          
          # Crear archivos de distribución completa
          tar -czf better-logger-complete-${VERSION}.tar.gz dist/ docs/ README.md package.json
          zip -r better-logger-complete-${VERSION}.zip dist/ docs/ README.md package.json
          
          # Crear paquetes modulares individuales
          for module in core styling exports; do
            if [ -d "dist/modular/$module" ]; then
              tar -czf better-logger-${module}-${VERSION}.tar.gz dist/modular/${module}/ README.md package.json
              zip -r better-logger-${module}-${VERSION}.zip dist/modular/${module}/ README.md package.json
            fi
          done

      - name: 🏷️ Commit and tag with enhanced info
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          
          # Crear commit message mejorado
          COMMIT_MSG="chore: release ${{ needs.prepare-full-release.outputs.version }}"
          if [ "${{ inputs.use_gemini }}" == "true" ]; then
            COMMIT_MSG="$COMMIT_MSG (AI-generated)"
          fi
          
          git commit -m "$COMMIT_MSG" || true
          git tag -a "${{ needs.prepare-full-release.outputs.tag }}" -m "Release ${{ needs.prepare-full-release.outputs.version }}"
          git push origin main --tags

      - name: 📝 Prepare comprehensive release notes
        run: |
          VERSION=${{ needs.prepare-full-release.outputs.version }}
          CHANGELOG=$(echo "${{ needs.prepare-full-release.outputs.changelog }}" | base64 -d)
          
          echo "# Better Logger ${VERSION}" > FINAL_RELEASE_NOTES.md
          echo "" >> FINAL_RELEASE_NOTES.md
          
          if [ "${{ inputs.use_gemini }}" == "true" ]; then
            echo "🤖 **AI-Generated Release** - This release was analyzed and versioned using Gemini AI" >> FINAL_RELEASE_NOTES.md
            echo "" >> FINAL_RELEASE_NOTES.md
          fi
          
          if [ "${{ needs.prepare-full-release.outputs.is_prerelease }}" == "true" ]; then
            echo "⚠️ **This is a pre-release version** - Not recommended for production use." >> FINAL_RELEASE_NOTES.md
            echo "" >> FINAL_RELEASE_NOTES.md
          fi
          
          echo "## 🔄 Changes" >> FINAL_RELEASE_NOTES.md
          echo "$CHANGELOG" >> FINAL_RELEASE_NOTES.md
          echo "" >> FINAL_RELEASE_NOTES.md
          
          # Incluir análisis de bundle
          cat BUNDLE_ANALYSIS.md >> FINAL_RELEASE_NOTES.md
          echo "" >> FINAL_RELEASE_NOTES.md
          
          echo "## 📦 Available Packages" >> FINAL_RELEASE_NOTES.md
          echo "### Complete Library" >> FINAL_RELEASE_NOTES.md
          echo "\`\`\`bash" >> FINAL_RELEASE_NOTES.md
          if [ "${{ needs.prepare-full-release.outputs.is_prerelease }}" == "true" ]; then
            echo "npm install @mks2508/better-logger@${{ needs.prepare-full-release.outputs.release_channel }}" >> FINAL_RELEASE_NOTES.md
          else
            echo "npm install @mks2508/better-logger" >> FINAL_RELEASE_NOTES.md
          fi
          echo "\`\`\`" >> FINAL_RELEASE_NOTES.md
          echo "" >> FINAL_RELEASE_NOTES.md
          
          echo "### Modular Packages" >> FINAL_RELEASE_NOTES.md
          echo "Download individual modules from the release assets below for selective usage." >> FINAL_RELEASE_NOTES.md

      - name: 🚀 Create Comprehensive GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-full-release.outputs.tag }}
          name: Better Logger ${{ needs.prepare-full-release.outputs.version }}${{ inputs.use_gemini && ' (AI)' || '' }}
          body_path: FINAL_RELEASE_NOTES.md
          draft: false
          prerelease: ${{ needs.prepare-full-release.outputs.is_prerelease == 'true' }}
          files: |
            better-logger-complete-${{ needs.prepare-full-release.outputs.version }}.tar.gz
            better-logger-complete-${{ needs.prepare-full-release.outputs.version }}.zip
            better-logger-core-${{ needs.prepare-full-release.outputs.version }}.tar.gz
            better-logger-core-${{ needs.prepare-full-release.outputs.version }}.zip
            better-logger-styling-${{ needs.prepare-full-release.outputs.version }}.tar.gz
            better-logger-styling-${{ needs.prepare-full-release.outputs.version }}.zip
            better-logger-exports-${{ needs.prepare-full-release.outputs.version }}.tar.gz
            better-logger-exports-${{ needs.prepare-full-release.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== COMPREHENSIVE RELEASE SUMMARY =====
  comprehensive-summary:
    runs-on: ubuntu-latest
    needs: [gemini-analysis, prepare-full-release, publish-npm-full, publish-github-full, create-comprehensive-release]
    if: always() && needs.prepare-full-release.result == 'success'
    
    steps:
      - name: 📊 Comprehensive Release Summary  
        run: |
          VERSION="${{ needs.prepare-full-release.outputs.version }}"
          TAG="${{ needs.prepare-full-release.outputs.tag }}"
          CHANNEL="${{ needs.prepare-full-release.outputs.release_channel }}"
          IS_PRERELEASE="${{ needs.prepare-full-release.outputs.is_prerelease }}"
          USED_AI="${{ inputs.use_gemini }}"
          
          echo "## 🎉 Comprehensive Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Channel**: $CHANNEL" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY
          echo "- **AI-Generated**: $USED_AI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "- **Complete Library**: Full Better Logger with all features" >> $GITHUB_STEP_SUMMARY
          echo "- **Modular Builds**: Core, Styling, and Exports available separately" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.target_registry == 'npm' || inputs.target_registry == 'both' }}" ]; then
            echo "- **NPM**: https://www.npmjs.com/package/@mks2508/better-logger" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ inputs.target_registry == 'github' || inputs.target_registry == 'both' }}" ]; then
            echo "- **GitHub Packages**: https://github.com/MKS2508/advanced-logger/packages/" >> $GITHUB_STEP_SUMMARY  
          fi
          echo "- **GitHub Release**: https://github.com/MKS2508/advanced-logger/releases/tag/$TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: https://mks2508.github.io/advanced-logger/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          if [ "$IS_PRERELEASE" == "true" ]; then
            echo "npm install @mks2508/better-logger@$CHANNEL" >> $GITHUB_STEP_SUMMARY
          else  
            echo "npm install @mks2508/better-logger" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY