---
name: Full Release Pipeline - Granular AI Steps

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Tipo de versión'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      version_prefix:
        description: 'Prefijo de versión'
        required: false
        default: 'stable'
        type: choice
        options:
          - stable
          - alpha
          - beta
          - rc
      target_registry:
        description: 'Registro objetivo'
        required: false
        default: 'both'
        type: choice
        options:
          - npm
          - github
          - both
      skip_tests:
        description: 'Saltar tests (no recomendado)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Solo mostrar qué haría (dry run)'
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - '.github/workflows/docs-demo.yml'

env:
  NODE_VERSION: '20'

jobs:
  # ===== STEP 1: AI VERSION ANALYSIS & GENERATION =====
  ai-version-generation:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    permissions:
      contents: write

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_channel: ${{ steps.version.outputs.release_channel }}
      should_skip: ${{ steps.version.outputs.should_skip }}

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "📦 Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: "🤖 Setup Gemini CLI"
        run: |
          echo "🤖 Configurando Gemini CLI..."
          # Install Gemini CLI
          npm install -g @google/generative-ai
          # Verificar instalación
          echo "✅ Gemini CLI configurado"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: "🤖 Step 1: AI Version Analysis & Generation"
        id: version
        env:
          VERSION_TYPE: ${{ inputs.version_type || 'auto' }}
          VERSION_PREFIX: ${{ inputs.version_prefix || 'stable' }}
          TARGET_REGISTRY: ${{ inputs.target_registry || 'npm' }}
          DRY_RUN: ${{ inputs.dry_run || 'false' }}
        run: |
          echo "🤖 === PASO 1: ANÁLISIS Y GENERACIÓN DE VERSIÓN CON AI ==="

          # Mostrar contexto de ejecución
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "📝 Ejecutando en modo manual con parámetros especificados"
          else
            echo "🔄 Ejecutando automáticamente desde push - usando defaults"
          fi

          # Preparar argumentos para version-manager usando variables de entorno
          ARGS="--auto-approve"

          if [ "$VERSION_TYPE" != "auto" ]; then
            ARGS="$ARGS --type $VERSION_TYPE"
          fi

          if [ "$VERSION_PREFIX" != "stable" ]; then
            ARGS="$ARGS --prefix $VERSION_PREFIX"
          fi

          # Mostrar comando que se ejecutará
          echo "📋 Ejecutando: bun project-utils/version-manager.ts $ARGS"

          if [ "$DRY_RUN" = "true" ]; then
            echo "🔍 [DRY RUN] Se generaría nueva versión con: $ARGS"
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "version=dry-run" >> $GITHUB_OUTPUT
            echo "tag=dry-run" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_channel=dry-run" >> $GITHUB_OUTPUT
          else
            # Ejecutar version-manager con AI
            echo "🚀 Ejecutando version-manager con análisis AI..."
            bun project-utils/version-manager.ts $ARGS

            # Obtener nueva versión del package.json
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

            # Determinar si es prerelease y canal
            if [[ "$NEW_VERSION" == *"alpha"* ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "release_channel=alpha" >> $GITHUB_OUTPUT
            elif [[ "$NEW_VERSION" == *"beta"* ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "release_channel=beta" >> $GITHUB_OUTPUT
            elif [[ "$NEW_VERSION" == *"rc"* ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "release_channel=rc" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "release_channel=latest" >> $GITHUB_OUTPUT
            fi

            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "✅ Nueva versión generada: $NEW_VERSION"
          fi

      - name: "🏷️ Commit and push version changes"
        if: steps.version.outputs.should_skip != 'true'
        run: |
          echo "🏷️ Commiteando cambios de versión..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json CHANGELOG.json packages/*/package.json
          git commit -m "chore: release ${{ steps.version.outputs.version }} [skip ci]" || echo "No changes to commit"
          git push origin main

      - name: "📤 Upload version artifacts"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: version-artifacts
          path: |
            project-utils/.temp/
            CHANGELOG.json
            package.json
          retention-days: 7

  # ===== STEP 2: BUILD & PREPARE =====
  build-and-prepare:
    runs-on: ubuntu-latest
    needs: ai-version-generation
    if: needs.ai-version-generation.outputs.should_skip != 'true'

    steps:
      - name: "📥 Checkout code with version changes"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: "🔄 Pull latest changes"
        run: git pull origin main

      - name: "📦 Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: "🧪 Step 2: Run tests (unless skipped)"
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests != 'true'
        run: |
          echo "🧪 === PASO 2: EJECUTANDO TESTS Y VALIDACIONES ==="
          bun run type-check
          bun run test
          echo "✅ Tests completados exitosamente"

      - name: "🏗️ Step 3: Build all modules"
        run: |
          echo "🏗️ === PASO 3: COMPILANDO TODOS LOS MÓDULOS ==="
          bun run build:all
          echo "✅ Build completado exitosamente"

          # Mostrar archivos generados
          echo "📊 Archivos generados:"
          ls -la dist/

      - name: "📤 Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.ai-version-generation.outputs.version }}
          path: dist/
          retention-days: 30

  # ===== STEP 3: PUBLISH SUB-PACKAGES =====
  publish-subpackages:
    runs-on: ubuntu-latest
    needs: [ai-version-generation, build-and-prepare]
    if: needs.ai-version-generation.outputs.should_skip != 'true'

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          ref: main

      - name: "📦 Setup Node.js with NPM registry"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.ai-version-generation.outputs.version }}
          path: dist/

      - name: "🚀 Step 3a: Publish Sub-Packages to NPM"
        run: |
          echo "🚀 === PASO 3a: PUBLICANDO SUB-PACKAGES EN NPM ==="
          
          # Core package
          echo "📦 Publishing @mks2508/better-logger-core"
          cd packages/core
          if [ "${{ needs.ai-version-generation.outputs.is_prerelease }}" == "true" ]; then
            npm publish --access public --tag ${{ needs.ai-version-generation.outputs.release_channel }}
          else
            npm publish --access public
          fi
          cd ../..
          
          # Styling package
          echo "📦 Publishing @mks2508/better-logger-styling"
          cd packages/styling
          if [ "${{ needs.ai-version-generation.outputs.is_prerelease }}" == "true" ]; then
            npm publish --access public --tag ${{ needs.ai-version-generation.outputs.release_channel }}
          else
            npm publish --access public
          fi
          cd ../..
          
          # Exports package
          echo "📦 Publishing @mks2508/better-logger-exports"
          cd packages/exports
          if [ "${{ needs.ai-version-generation.outputs.is_prerelease }}" == "true" ]; then
            npm publish --access public --tag ${{ needs.ai-version-generation.outputs.release_channel }}
          else
            npm publish --access public
          fi
          cd ../..
          
          echo "✅ Sub-packages published successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ===== STEP 4: NPM MAIN PACKAGE PUBLISHING =====
  publish-npm:
    runs-on: ubuntu-latest
    needs: [ai-version-generation, build-and-prepare, publish-subpackages]
    if: needs.ai-version-generation.outputs.should_skip != 'true' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.target_registry == 'npm' || github.event.inputs.target_registry == 'both')))

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          ref: main

      - name: "📦 Setup Node.js with NPM registry"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.ai-version-generation.outputs.version }}
          path: dist/

      - name: "🚀 Step 4: Publish to NPM Registry"
        run: |
          echo "🚀 === PASO 4: PUBLICANDO EN NPM REGISTRY ==="
          if [ "${{ needs.ai-version-generation.outputs.is_prerelease }}" == "true" ]; then
            echo "📦 Publishing prerelease to NPM with tag: ${{ needs.ai-version-generation.outputs.release_channel }}"
            npm publish --access public --tag ${{ needs.ai-version-generation.outputs.release_channel }}
          else
            echo "📦 Publishing stable release to NPM"
            npm publish --access public
          fi
          echo "✅ Publicación en NPM completada"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ===== STEP 4.5: DOCS & DEMO DEPLOYMENT =====
  deploy-docs-demo:
    uses: ./.github/workflows/docs-demo.yml
    needs: [ai-version-generation, build-and-prepare]
    if: needs.ai-version-generation.outputs.should_skip != 'true'

  # ===== STEP 4: GITHUB PACKAGES PUBLISHING =====
  publish-github:
    runs-on: ubuntu-latest
    needs: [ai-version-generation, build-and-prepare, publish-subpackages]
    if: needs.ai-version-generation.outputs.should_skip != 'true' && github.event_name == 'workflow_dispatch' && (github.event.inputs.target_registry == 'github' || github.event.inputs.target_registry == 'both')

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          ref: main

      - name: "📦 Setup Node.js with GitHub registry"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.ai-version-generation.outputs.version }}
          path: dist/

      - name: "📦 Step 5: Publish to GitHub Packages"
        run: |
          echo "📦 === PASO 5: PUBLICANDO EN GITHUB PACKAGES ==="
          if [ "${{ needs.ai-version-generation.outputs.is_prerelease }}" == "true" ]; then
            echo "📦 Publishing prerelease to GitHub Packages with tag: ${{ needs.ai-version-generation.outputs.release_channel }}"
            npm publish --access public --tag ${{ needs.ai-version-generation.outputs.release_channel }}
          else
            echo "📦 Publishing stable release to GitHub Packages"
            npm publish --access public
          fi
          echo "✅ Publicación en GitHub Packages completada"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== STEP 5: GITHUB RELEASE WITH AI =====
  create-github-release:
    runs-on: ubuntu-latest
    needs: [ai-version-generation, build-and-prepare, publish-subpackages, publish-npm, publish-github, deploy-docs-demo]
    if: always() && needs.ai-version-generation.outputs.should_skip != 'true' && needs.build-and-prepare.result == 'success'

    permissions:
      contents: write

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: "📦 Setup Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.ai-version-generation.outputs.version }}
          path: dist/

      - name: "🏷️ Create git tag"
        run: |
          echo "🏷️ Creando tag de git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.ai-version-generation.outputs.tag }}" -m "Release ${{ needs.ai-version-generation.outputs.version }}"
          git push origin --tags

      - name: "🚀 Step 6: Create GitHub Release with AI"
        run: |
          echo "🚀 === PASO 6: CREANDO GITHUB RELEASE CON AI ==="
          bun project-utils/github-release-manager.ts --auto-approve
          echo "✅ GitHub Release creado exitosamente"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== RELEASE SUMMARY =====
  release-summary:
    runs-on: ubuntu-latest
    needs: [ai-version-generation, build-and-prepare, publish-subpackages, publish-npm, publish-github, deploy-docs-demo, create-github-release]
    if: always() && needs.ai-version-generation.outputs.should_skip != 'true'

    steps:
      - name: "📊 Comprehensive Release Summary"
        run: |
          VERSION="${{ needs.ai-version-generation.outputs.version }}"
          TAG="${{ needs.ai-version-generation.outputs.tag }}"
          CHANNEL="${{ needs.ai-version-generation.outputs.release_channel }}"
          IS_PRERELEASE="${{ needs.ai-version-generation.outputs.is_prerelease }}"

          echo "## 🎉 Full Release Pipeline Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Channel**: $CHANNEL" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Pipeline Steps Results" >> $GITHUB_STEP_SUMMARY
          echo "1. **AI Version Generation**: ✅ $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "2. **Build & Prepare**: ${{ needs.build-and-prepare.result }}" >> $GITHUB_STEP_SUMMARY
          echo "3. **Sub-Packages Publishing**: ${{ needs.publish-subpackages.result }}" >> $GITHUB_STEP_SUMMARY
          echo "4. **Main NPM Publishing**: ${{ needs.publish-npm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "5. **GitHub Packages**: ${{ needs.publish-github.result }}" >> $GITHUB_STEP_SUMMARY
          echo "6. **Docs & Demo Deployment**: ${{ needs.deploy-docs-demo.result }}" >> $GITHUB_STEP_SUMMARY
          echo "7. **GitHub Release**: ${{ needs.create-github-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.target_registry == 'npm' || github.event.inputs.target_registry == 'both')) }}" == "true" ]; then
            echo "- **Main Package**: https://www.npmjs.com/package/@mks2508/better-logger" >> $GITHUB_STEP_SUMMARY
            echo "- **Core Package**: https://www.npmjs.com/package/@mks2508/better-logger-core" >> $GITHUB_STEP_SUMMARY
            echo "- **Styling Package**: https://www.npmjs.com/package/@mks2508/better-logger-styling" >> $GITHUB_STEP_SUMMARY
            echo "- **Exports Package**: https://www.npmjs.com/package/@mks2508/better-logger-exports" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.target_registry == 'github' || github.event.inputs.target_registry == 'both') }}" == "true" ]; then
            echo "- **GitHub Packages**: https://github.com/MKS2508/advanced-logger/packages/" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **GitHub Release**: https://github.com/MKS2508/advanced-logger/releases/tag/$TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          if [ "$IS_PRERELEASE" == "true" ]; then
            echo "npm install @mks2508/better-logger@$CHANNEL" >> $GITHUB_STEP_SUMMARY
          else
            echo "npm install @mks2508/better-logger" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
