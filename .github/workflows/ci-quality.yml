---
name: CI Quality & Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_performance:
        description: 'Ejecutar tests de performance'
        required: false
        default: true
        type: boolean
      run_visual:
        description: 'Ejecutar tests visuales'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # ===== MATRIX TESTING =====
  test-matrix:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        bun-version: ["1.0", "latest"]
        build-mode: [full, core, styling, exports]

    name: Test Bun ${{ matrix.bun-version }} - ${{ matrix.build-mode }}

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "📦 Setup Bun ${{ matrix.bun-version }}"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: 🔍 Type checking
        run: bun run type-check

      - name: "🏗️ Build ${{ matrix.build-mode }}"
        run: |
          if [ "${{ matrix.build-mode }}" = "full" ]; then
            bun run build:all
          else
            bun run build:${{ matrix.build-mode }}
          fi

      - name: "🧪 Run tests"
        run: bun run ci:test

      - name: 📊 Check bundle sizes
        run: bun run size-limit

      - name: "📤 Upload build artifacts (Node 20 only)"
        uses: actions/upload-artifact@v4
        if: matrix.node-version == 20
        with:
          name: build-${{ matrix.build-mode }}-node${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  # ===== PERFORMANCE TESTING =====
  performance-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ inputs.run_performance != false }}

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-full-node20
          path: dist/

      - name: ⚡ Performance benchmarks
        run: bun run test:performance

      - name: 📊 Bundle analysis
        run: |
          echo "## 📦 Bundle Analysis Report" > performance-report.md
          echo "### Size Breakdown" >> performance-report.md
          echo "\`\`\`" >> performance-report.md
          ls -la dist/ >> performance-report.md
          echo "\`\`\`" >> performance-report.md

          echo "### File Sizes by Module" >> performance-report.md
          for module in core styling exports; do
            if [ -d "dist/modular/$module" ]; then
              echo "#### $module Module" >> performance-report.md
              echo "\`\`\`" >> performance-report.md
              ls -la dist/modular/$module/ >> performance-report.md
              echo "\`\`\`" >> performance-report.md
            fi
          done

          echo "### Performance Metrics" >> performance-report.md
          echo "- **Build Time**: $(date)" >> performance-report.md
          echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> performance-report.md

      - name: "📤 Upload performance report"
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md
          retention-days: 30

  # ===== VISUAL TESTING =====
  visual-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ inputs.run_visual == true }}

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-full-node20
          path: dist/

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps chromium

      - name: "🖼️ Run visual tests"
        run: bun run test:visual

      - name: "📤 Upload test results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: test-results/
          retention-days: 30

      - name: "📤 Upload screenshots"
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-test-failures
          path: test-results/
          retention-days: 30

  # ===== SECURITY AUDIT =====
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=high || echo "Security issues detected, review required"

      - name: 📊 Check for outdated packages
        run: |
          echo "📊 Checking for outdated packages..."
          npm outdated || true

      - name: 🔍 Vulnerability report
        run: |
          echo "## 🔒 Security Audit Report" > security-report.md
          echo "### NPM Audit Results" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npm audit --audit-level=moderate >> security-report.md || echo "No critical vulnerabilities" >> security-report.md
          echo "\`\`\`" >> security-report.md

          echo "### Outdated Packages" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npm outdated >> security-report.md || echo "All packages up to date" >> security-report.md
          echo "\`\`\`" >> security-report.md

      - name: "📤 Upload security report"
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # ===== CODE QUALITY ANALYSIS =====
  code-quality:
    runs-on: ubuntu-latest
    needs: test-matrix

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: 🔍 Code analysis
        run: |
          echo "🔍 Analyzing code quality..."

          # Análisis básico de código
          echo "## 📊 Code Quality Report" > quality-report.md
          echo "### TypeScript Analysis" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          bun run type-check >> quality-report.md 2>&1 || echo "TypeScript issues detected" >> quality-report.md
          echo "\`\`\`" >> quality-report.md

          echo "### File Statistics" >> quality-report.md
          echo "- **Total TypeScript files**: $(find src/ -name '*.ts' | wc -l)" >> quality-report.md
          echo "- **Total lines of code**: $(find src/ -name '*.ts' -exec wc -l {} + | tail -1 | awk '{print $1}')" >> quality-report.md
          echo "- **Build date**: $(date)" >> quality-report.md

      - name: "📤 Upload quality report"
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: quality-report.md
          retention-days: 30

  # ===== PROJECT UTILS VALIDATION =====
  validate-project-utils:
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "🔧 Install dependencies"
        run: bun install --frozen-lockfile

      - name: "🧪 Test project-utils scripts"
        run: |
          echo "🧪 Validating project-utils scripts..."

          # Verificar que los scripts existan y sean ejecutables
          SCRIPTS=("commit-generator.ts" "version-manager.ts" "github-release-manager.ts" "auto-release-gemini.ts")

          for script in "${SCRIPTS[@]}"; do
            if [ -f "project-utils/$script" ]; then
              echo "✅ $script exists"
              # Verificar sintaxis básica
              node --check "project-utils/$script" && echo "✅ $script syntax OK" || echo "❌ $script syntax error"
            else
              echo "❌ $script missing"
            fi
          done

      - name: 📊 Validate package.json scripts
        run: |
          echo "📊 Validating package.json scripts..."

          # Verificar scripts críticos
          CRITICAL_SCRIPTS=("build" "build:all" "commit:auto" "version:auto" "workflow:full")

          for script in "${CRITICAL_SCRIPTS[@]}"; do
            if bun run --silent "$script" --help >/dev/null 2>&1; then
              echo "✅ Script '$script' is valid"
            else
              echo "❌ Script '$script' has issues"
            fi
          done

  # ===== COMPREHENSIVE SUMMARY =====
  ci-summary:
    runs-on: ubuntu-latest
    needs: [test-matrix, performance-tests, visual-tests, security-audit, code-quality, validate-project-utils]
    if: always()

    steps:
      - name: 📊 CI Quality Summary
        run: |
          echo "## 📊 CI Quality & Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Status de cada job
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Matrix Testing**: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Visual Tests**: ${{ needs.visual-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Utils**: ${{ needs.validate-project-utils.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📋 Coverage Matrix" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Versions**: 18, 20, 21" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Modes**: full, core, styling, exports" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Types**: unit, performance, visual, security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determinar estado general
          if [ "${{ needs.test-matrix.result }}" = "success" ] && ["${{ needs.security-audit.result }}" = "success"] && ["${{ needs.code-quality.result }}" = "success"]; then
            echo "### ✅ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All critical quality checks passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Overall Status: ATTENTION REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "Some quality checks require attention. Review individual job results." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📎 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Build artifacts for all modules" >> $GITHUB_STEP_SUMMARY
          echo "- Performance analysis report" >> $GITHUB_STEP_SUMMARY
          echo "- Security audit report" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality metrics" >> $GITHUB_STEP_SUMMARY
