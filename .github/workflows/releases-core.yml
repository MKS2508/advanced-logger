name: Core Modular Releases - AI Enhanced

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Módulo a construir y publicar'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - core
          - styling
          - exports
          - full
      version_type:
        description: 'Tipo de versión'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      version_prefix:
        description: 'Prefijo de versión'
        required: false
        default: 'stable'
        type: choice
        options:
          - stable
          - alpha
          - beta
          - rc
      target_registry:
        description: 'Registro objetivo'
        required: false
        default: 'both'
        type: choice
        options:
          - npm
          - github
          - both
      skip_tests:
        description: 'Saltar tests (no recomendado)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # ===== STEP 1: AI VERSION ANALYSIS FOR MODULAR RELEASE =====
  ai-modular-version:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_channel: ${{ steps.version.outputs.release_channel }}
      modules_to_build: ${{ steps.modules.outputs.modules }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: 🔧 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🤖 Setup Gemini CLI
        run: |
          echo "🤖 Configurando Gemini CLI para release modular..."
          # Install Gemini CLI
          npm install -g @google/generative-ai
          # Verificar instalación
          echo "✅ Gemini CLI configurado para módulos"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: 🤖 Step 1: AI Version Analysis for Modular Release
        id: version
        run: |
          echo "🤖 === PASO 1: ANÁLISIS AI PARA RELEASE MODULAR ==="
          
          # Configurar contexto específico para release modular
          WORK_TYPE="modular-release"
          AFFECTED_COMPONENTS="${{ inputs.module }}"
          CONTEXT="Modular release for ${{ inputs.module }} module(s)"
          
          VERSION_TYPE="${{ inputs.version_type }}"
          VERSION_PREFIX="${{ inputs.version_prefix }}"
          
          # Preparar argumentos para version-manager con contexto de módulos
          ARGS="--auto-approve"
          
          if [ "$VERSION_TYPE" != "auto" ]; then
            ARGS="$ARGS --type $VERSION_TYPE"
          fi
          
          if [ "$VERSION_PREFIX" != "stable" ]; then
            ARGS="$ARGS --prefix $VERSION_PREFIX"
          fi
          
          echo "📋 Ejecutando version-manager con contexto modular: $AFFECTED_COMPONENTS"
          echo "🚀 Comando: bun project-utils/version-manager.ts $ARGS"
          
          # Ejecutar version-manager con análisis AI
          bun project-utils/version-manager.ts $ARGS
          
          # Obtener nueva versión
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Determinar si es prerelease y canal
          if [[ "$NEW_VERSION" == *"alpha"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_channel=alpha" >> $GITHUB_OUTPUT
          elif [[ "$NEW_VERSION" == *"beta"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_channel=beta" >> $GITHUB_OUTPUT
          elif [[ "$NEW_VERSION" == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_channel=rc" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_channel=latest" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Versión generada para release modular: $NEW_VERSION"

      - name: 📋 Step 2: Determine modules to build
        id: modules
        run: |
          echo "📋 === PASO 2: DETERMINANDO MÓDULOS A CONSTRUIR ==="
          MODULE_INPUT="${{ inputs.module }}"
          
          case "$MODULE_INPUT" in
            "all")
              MODULES="core,styling,exports,full"
              ;;
            "full")
              MODULES="full"
              ;;
            *)
              MODULES="$MODULE_INPUT"
              ;;
          esac
          
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          echo "✅ Módulos a construir: $MODULES"

      - name: 🏷️ Commit version changes
        run: |
          echo "🏷️ Commiteando cambios de versión modular..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json CHANGELOG.json packages/*/package.json
          git commit -m "chore: modular release ${{ steps.version.outputs.version }} (${{ inputs.module }})" || echo "No changes to commit"
          git push origin main

      - name: 📤 Upload version artifacts
        uses: actions/upload-artifact@v4
        with:
          name: modular-version-artifacts
          path: |
            project-utils/.temp/
            CHANGELOG.json
            package.json
          retention-days: 7

  # ===== STEP 2: BUILD SPECIFIED MODULES =====
  build-modular:
    runs-on: ubuntu-latest
    needs: ai-modular-version
    
    strategy:
      matrix:
        module: ${{ fromJson(format('["{0}"]', needs.ai-modular-version.outputs.modules_to_build)) }}
    
    steps:
      - name: 📥 Checkout code with version changes
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          
      - name: 🔄 Pull latest changes
        run: git pull origin main

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: 🔧 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🧪 Run tests for module (unless skipped)
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "🧪 === EJECUTANDO TESTS PARA MÓDULO: ${{ matrix.module }} ==="
          bun run type-check
          bun run test
          echo "✅ Tests completados para ${{ matrix.module }}"

      - name: 🏗️ Step 3: Build specific module
        run: |
          echo "🏗️ === PASO 3: CONSTRUYENDO MÓDULO: ${{ matrix.module }} ==="
          
          case "${{ matrix.module }}" in
            "core")
              bun run build:core
              echo "✅ Módulo core construido"
              ;;
            "styling") 
              bun run build:styling
              echo "✅ Módulo styling construido"
              ;;
            "exports")
              bun run build:exports
              echo "✅ Módulo exports construido"
              ;;
            "full")
              bun run build:full
              echo "✅ Build completo realizado"
              ;;
            *)
              echo "🏗️ Construyendo todos los módulos..."
              bun run build:all
              echo "✅ Todos los módulos construidos"
              ;;
          esac
          
          # Mostrar archivos generados
          echo "📊 Archivos generados para ${{ matrix.module }}:"
          if [ "${{ matrix.module }}" == "full" ] || [ "${{ matrix.module }}" == "all" ]; then
            ls -la dist/
          else
            ls -la dist/modular/${{ matrix.module }}/ || ls -la dist/
          fi

      - name: 📤 Upload build artifacts for module
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.module }}-${{ needs.ai-modular-version.outputs.version }}
          path: |
            dist/
          retention-days: 30

  # ===== STEP 3: PUBLISH MODULAR RELEASES =====
  publish-modular:
    runs-on: ubuntu-latest
    needs: [ai-modular-version, build-modular]
    if: inputs.target_registry == 'npm' || inputs.target_registry == 'both'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: 📦 Setup Bun with NPM registry
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          registry-url: 'https://registry.npmjs.org'

      - name: 📥 Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*-${{ needs.ai-modular-version.outputs.version }}
          path: builds/
          merge-multiple: true

      - name: 🚀 Step 4: Publish modular releases to NPM
        run: |
          echo "🚀 === PASO 4: PUBLICANDO RELEASES MODULARES EN NPM ==="
          
          # Determinar tag de publicación
          if [ "${{ needs.ai-modular-version.outputs.is_prerelease }}" == "true" ]; then
            PUBLISH_TAG="${{ needs.ai-modular-version.outputs.release_channel }}"
            echo "📦 Publicando como prerelease con tag: $PUBLISH_TAG"
          else
            PUBLISH_TAG="latest"
            echo "📦 Publicando como release estable"
          fi
          
          # Publicar dependiendo del módulo seleccionado
          if [ "${{ inputs.module }}" == "all" ] || [ "${{ inputs.module }}" == "full" ]; then
            echo "📦 Publicando paquete completo..."
            npm publish --access public --tag $PUBLISH_TAG
          else
            echo "📦 Publicando módulo específico: ${{ inputs.module }}"
            # Para releases modulares específicos, publicar como paquete scoped
            npm publish --access public --tag $PUBLISH_TAG
          fi
          
          echo "✅ Publicación modular completada en NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ===== STEP 4: GITHUB PACKAGES (if selected) =====
  publish-github-modular:
    runs-on: ubuntu-latest
    needs: [ai-modular-version, build-modular]
    if: inputs.target_registry == 'github' || inputs.target_registry == 'both'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: 📦 Setup Bun with GitHub registry
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: 📥 Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*-${{ needs.ai-modular-version.outputs.version }}
          path: builds/
          merge-multiple: true

      - name: 📦 Step 5: Publish to GitHub Packages
        run: |
          echo "📦 === PASO 5: PUBLICANDO EN GITHUB PACKAGES ==="
          
          if [ "${{ needs.ai-modular-version.outputs.is_prerelease }}" == "true" ]; then
            echo "📦 Publishing prerelease to GitHub Packages with tag: ${{ needs.ai-modular-version.outputs.release_channel }}"
            npm publish --access public --tag ${{ needs.ai-modular-version.outputs.release_channel }}
          else
            echo "📦 Publishing stable release to GitHub Packages"
            npm publish --access public
          fi
          echo "✅ Publicación modular completada en GitHub Packages"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== STEP 5: CREATE MODULAR GITHUB RELEASE =====
  create-modular-release:
    runs-on: ubuntu-latest
    needs: [ai-modular-version, build-modular, publish-modular, publish-github-modular]
    if: always() && needs.build-modular.result == 'success'
    
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: 🔧 Install dependencies
        run: bun install --frozen-lockfile

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*-${{ needs.ai-modular-version.outputs.version }}
          path: builds/
          merge-multiple: true

      - name: 🏷️ Create git tag for modular release
        run: |
          echo "🏷️ Creando tag para release modular..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          TAG_NAME="${{ needs.ai-modular-version.outputs.tag }}-${{ inputs.module }}"
          git tag -a "$TAG_NAME" -m "Modular release ${{ needs.ai-modular-version.outputs.version }} (${{ inputs.module }})"
          git push origin --tags

      - name: 🚀 Step 6: Create Modular GitHub Release with AI
        run: |
          echo "🚀 === PASO 6: CREANDO GITHUB RELEASE MODULAR CON AI ==="
          
          # Agregar contexto de módulo al release
          export RELEASE_CONTEXT="Modular release for ${{ inputs.module }} module(s)"
          export RELEASE_MODULE="${{ inputs.module }}"
          
          bun project-utils/github-release-manager.ts --auto-approve
          echo "✅ GitHub Release modular creado exitosamente"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== MODULAR RELEASE SUMMARY =====
  modular-summary:
    runs-on: ubuntu-latest
    needs: [ai-modular-version, build-modular, publish-modular, publish-github-modular, create-modular-release]
    if: always()
    
    steps:
      - name: 📊 Modular Release Summary
        run: |
          VERSION="${{ needs.ai-modular-version.outputs.version }}"
          MODULE="${{ inputs.module }}"
          CHANNEL="${{ needs.ai-modular-version.outputs.release_channel }}"
          IS_PRERELEASE="${{ needs.ai-modular-version.outputs.is_prerelease }}"
          
          echo "## 🎉 Modular Release Pipeline Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Module(s)**: $MODULE" >> $GITHUB_STEP_SUMMARY
          echo "- **Channel**: $CHANNEL" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Pipeline Steps Results" >> $GITHUB_STEP_SUMMARY
          echo "1. **AI Version Analysis**: ✅ $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "2. **Module Build**: ${{ needs.build-modular.result }}" >> $GITHUB_STEP_SUMMARY
          echo "3. **NPM Publishing**: ${{ needs.publish-modular.result }}" >> $GITHUB_STEP_SUMMARY
          echo "4. **GitHub Packages**: ${{ needs.publish-github-modular.result }}" >> $GITHUB_STEP_SUMMARY
          echo "5. **GitHub Release**: ${{ needs.create-modular-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Module-Specific Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          if [ "$IS_PRERELEASE" == "true" ]; then
            echo "npm install @mks2508/better-logger@$CHANNEL  # $MODULE module included" >> $GITHUB_STEP_SUMMARY
          else
            echo "npm install @mks2508/better-logger  # $MODULE module included" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY