name: Nightly Builds with Smart Detection

on:
  schedule:
    # Ejecutar cada día a las 3:00 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Forzar build aunque no haya cambios'
        required: false
        default: false
        type: boolean
      include_prereleases:
        description: 'Incluir cambios de prereleases en detección'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # ===== SMART CHANGE DETECTION =====
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.has_changes }}
      change_type: ${{ steps.changes.outputs.change_type }}
      last_commit: ${{ steps.changes.outputs.last_commit }}
      commit_count: ${{ steps.changes.outputs.commit_count }}
      significant_changes: ${{ steps.changes.outputs.significant_changes }}
      files_changed: ${{ steps.changes.outputs.files_changed }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Analyze changes since last nightly
        id: changes
        run: |
          # Buscar último tag nightly
          LAST_NIGHTLY=$(git tag -l "nightly-*" | sort -V | tail -1 || echo "")
          LAST_RELEASE=$(git tag -l "v*" --exclude="nightly-*" --exclude="*alpha*" --exclude="*beta*" | sort -V | tail -1 || echo "")
          
          if [ -z "$LAST_NIGHTLY" ] && [ -z "$LAST_RELEASE" ]; then
            # No hay tags previos, verificar desde hace 24 horas
            SINCE_DATE=$(date -d '24 hours ago' --iso-8601)
            COMMITS_COUNT=$(git log --since="$SINCE_DATE" --oneline | wc -l)
            REFERENCE_POINT="24 hours ago"
          elif [ -n "$LAST_NIGHTLY" ] && [ -z "$LAST_RELEASE" ]; then
            # Solo hay nightlies
            COMMITS_COUNT=$(git log $LAST_NIGHTLY..HEAD --oneline | wc -l)
            REFERENCE_POINT=$LAST_NIGHTLY
          elif [ -z "$LAST_NIGHTLY" ] && [ -n "$LAST_RELEASE" ]; then
            # Solo hay releases normales
            COMMITS_COUNT=$(git log $LAST_RELEASE..HEAD --oneline | wc -l)
            REFERENCE_POINT=$LAST_RELEASE
          else
            # Hay ambos, usar el más reciente
            LAST_NIGHTLY_DATE=$(git log -1 --format=%ct $LAST_NIGHTLY)
            LAST_RELEASE_DATE=$(git log -1 --format=%ct $LAST_RELEASE)
            
            if [ "$LAST_NIGHTLY_DATE" -gt "$LAST_RELEASE_DATE" ]; then
              COMMITS_COUNT=$(git log $LAST_NIGHTLY..HEAD --oneline | wc -l)
              REFERENCE_POINT=$LAST_NIGHTLY
            else
              COMMITS_COUNT=$(git log $LAST_RELEASE..HEAD --oneline | wc -l)
              REFERENCE_POINT=$LAST_RELEASE
            fi
          fi
          
          LAST_COMMIT=$(git rev-parse --short HEAD)
          
          echo "commit_count=$COMMITS_COUNT" >> $GITHUB_OUTPUT
          echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          
          # Análisis inteligente de cambios
          SIGNIFICANT_CHANGES="false"
          CHANGE_TYPE="maintenance"
          
          if [ "$COMMITS_COUNT" -gt 0 ]; then
            # Analizar tipos de cambios desde el punto de referencia
            if [ "$REFERENCE_POINT" != "24 hours ago" ]; then
              CHANGES_LOG=$(git log $REFERENCE_POINT..HEAD --pretty=format:"%s" --no-merges)
            else
              CHANGES_LOG=$(git log --since="24 hours ago" --pretty=format:"%s" --no-merges)
            fi
            
            # Detectar cambios significativos
            if echo "$CHANGES_LOG" | grep -qE "(feat|feature|add|new)"; then
              SIGNIFICANT_CHANGES="true"
              CHANGE_TYPE="feature"
            elif echo "$CHANGES_LOG" | grep -qE "(fix|bug|repair|patch)"; then
              SIGNIFICANT_CHANGES="true" 
              CHANGE_TYPE="bugfix"
            elif echo "$CHANGES_LOG" | grep -qE "(perf|performance|optim|speed)"; then
              SIGNIFICANT_CHANGES="true"
              CHANGE_TYPE="performance"
            elif echo "$CHANGES_LOG" | grep -qE "(refactor|restructure|rewrite)"; then
              CHANGE_TYPE="refactor"
            elif echo "$CHANGES_LOG" | grep -qE "(docs|documentation|readme)"; then
              CHANGE_TYPE="documentation"
            fi
            
            # Analizar archivos modificados
            if [ "$REFERENCE_POINT" != "24 hours ago" ]; then
              FILES_CHANGED=$(git diff --name-only $REFERENCE_POINT..HEAD | wc -l)
            else
              FILES_CHANGED=$(git log --since="24 hours ago" --name-only --pretty=format: | sort | uniq | wc -l)
            fi
          else
            FILES_CHANGED=0
          fi
          
          echo "significant_changes=$SIGNIFICANT_CHANGES" >> $GITHUB_OUTPUT
          echo "change_type=$CHANGE_TYPE" >> $GITHUB_OUTPUT
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          
          # Determinar si hacer build
          if [ "$COMMITS_COUNT" -gt 0 ] || [ "${{ inputs.force_build }}" == "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Cambios detectados: $COMMITS_COUNT commits ($CHANGE_TYPE)"
            echo "📊 Archivos modificados: $FILES_CHANGED"
            echo "🔍 Desde: $REFERENCE_POINT"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT  
            echo "ℹ️ No hay cambios desde último build"
          fi

  # ===== INTELLIGENT NIGHTLY BUILD =====
  nightly-build:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    
    permissions:
      contents: write
      packages: write
      id-token: write
    
    outputs:
      nightly_version: ${{ steps.version.outputs.version }}
      nightly_tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm run ci:install

      - name: 🏗️ Build library with quality checks
        run: |
          npm run build:all
          npm run type-check
          npm run ci:test

      - name: 🏷️ Generate intelligent nightly version
        id: version
        run: |
          # Generar versión nightly inteligente
          DATE=$(date +%Y%m%d)
          TIME=$(date +%H%M)
          SHORT_SHA="${{ needs.detect-changes.outputs.last_commit }}"
          BASE_VERSION=$(node -p "require('./package.json').version")
          CHANGE_TYPE="${{ needs.detect-changes.outputs.change_type }}"
          
          # Remover cualquier sufijo existente del base version
          CLEAN_VERSION=$(echo $BASE_VERSION | sed 's/-.*//')
          
          # Crear versión con contexto inteligente
          if [ "${{ needs.detect-changes.outputs.significant_changes }}" == "true" ]; then
            NIGHTLY_VERSION="${CLEAN_VERSION}-nightly.${DATE}.${CHANGE_TYPE}.${SHORT_SHA}"
          else
            NIGHTLY_VERSION="${CLEAN_VERSION}-nightly.${DATE}.${SHORT_SHA}"
          fi
          
          NIGHTLY_TAG="nightly-${DATE}-${TIME}-${SHORT_SHA}"
          
          echo "version=$NIGHTLY_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NIGHTLY_TAG" >> $GITHUB_OUTPUT
          echo "🌙 Nightly version: $NIGHTLY_VERSION"
          echo "🏷️ Nightly tag: $NIGHTLY_TAG"

      - name: 📝 Update package for nightly
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: 📊 Generate build report
        run: |
          mkdir -p nightly-reports
          
          echo "# Nightly Build Report" > nightly-reports/build-report.md
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> nightly-reports/build-report.md
          echo "- **Build Date**: $(date)" >> nightly-reports/build-report.md
          echo "- **Commit**: ${{ needs.detect-changes.outputs.last_commit }}" >> nightly-reports/build-report.md
          echo "- **Commits Since Last**: ${{ needs.detect-changes.outputs.commit_count }}" >> nightly-reports/build-report.md
          echo "- **Files Changed**: ${{ needs.detect-changes.outputs.files_changed }}" >> nightly-reports/build-report.md
          echo "- **Change Type**: ${{ needs.detect-changes.outputs.change_type }}" >> nightly-reports/build-report.md
          echo "- **Significant Changes**: ${{ needs.detect-changes.outputs.significant_changes }}" >> nightly-reports/build-report.md
          echo "" >> nightly-reports/build-report.md
          
          echo "## Bundle Sizes" >> nightly-reports/build-report.md
          echo "\`\`\`" >> nightly-reports/build-report.md
          ls -lh dist/*.js dist/*.cjs 2>/dev/null | grep -E '\.(js|cjs)$' >> nightly-reports/build-report.md
          echo "\`\`\`" >> nightly-reports/build-report.md

      - name: 📦 Create nightly archives  
        run: |
          mkdir -p nightly-dist
          VERSION=${{ steps.version.outputs.version }}
          TAG=${{ steps.version.outputs.tag }}
          
          # Archivos completos
          tar -czf nightly-dist/better-logger-nightly-${TAG}.tar.gz dist/ nightly-reports/ README.md package.json
          zip -r nightly-dist/better-logger-nightly-${TAG}.zip dist/ nightly-reports/ README.md package.json
          
          # Archivos modulares (si existen)
          for module in core styling exports; do
            if [ -d "dist/modular/$module" ]; then
              tar -czf nightly-dist/better-logger-${module}-nightly-${TAG}.tar.gz dist/modular/${module}/ README.md package.json
            fi
          done

      - name: 🚀 Publish nightly to NPM
        run: |
          npm publish --tag nightly --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📦 Publish nightly to GitHub Packages  
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          echo "@mks2508:registry=https://npm.pkg.github.com" >> ~/.npmrc
          npm publish --registry=https://npm.pkg.github.com --tag nightly --access public

      - name: 🏷️ Create nightly tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com" 
          git tag -a "${{ steps.version.outputs.tag }}" -m "Nightly build ${{ steps.version.outputs.version }} (${{ needs.detect-changes.outputs.change_type }})"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: 🌙 Create intelligent nightly release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "🌙 Nightly Build ${{ steps.version.outputs.version }}"
          body: |
            🌙 **Nightly Build** - Experimental version for testing
            
            **⚠️ This is a development build - not recommended for production use**
            
            ## 📊 Build Analysis
            - **Change Type**: ${{ needs.detect-changes.outputs.change_type }}
            - **Significant Changes**: ${{ needs.detect-changes.outputs.significant_changes }}
            - **Commits**: ${{ needs.detect-changes.outputs.commit_count }}
            - **Files Modified**: ${{ needs.detect-changes.outputs.files_changed }}
            
            ## 🔄 What's Included
            ${{ needs.detect-changes.outputs.change_type == 'feature' && '✨ New features and enhancements' || '' }}
            ${{ needs.detect-changes.outputs.change_type == 'bugfix' && '🐛 Bug fixes and patches' || '' }}
            ${{ needs.detect-changes.outputs.change_type == 'performance' && '⚡ Performance improvements' || '' }}
            ${{ needs.detect-changes.outputs.change_type == 'refactor' && '🔧 Code refactoring and improvements' || '' }}
            ${{ needs.detect-changes.outputs.change_type == 'documentation' && '📝 Documentation updates' || '' }}
            ${{ needs.detect-changes.outputs.change_type == 'maintenance' && '🧹 Maintenance and minor updates' || '' }}
            
            ## 📦 Installation
            ```bash
            npm install @mks2508/better-logger@nightly
            ```
            
            ## 🔗 Links
            - **Commit**: https://github.com/MKS2508/advanced-logger/commit/${{ needs.detect-changes.outputs.last_commit }}
            - **NPM**: https://www.npmjs.com/package/@mks2508/better-logger/v/${{ steps.version.outputs.version }}
            
            ## ⏰ Auto-Generated
            This nightly build was automatically generated and published based on detected changes.
          draft: false
          prerelease: true
          files: |
            nightly-dist/better-logger-nightly-${{ steps.version.outputs.tag }}.tar.gz  
            nightly-dist/better-logger-nightly-${{ steps.version.outputs.tag }}.zip
            nightly-dist/better-logger-*-nightly-${{ steps.version.outputs.tag }}.tar.gz
            nightly-reports/build-report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Nightly build summary
        run: |
          echo "## 🌙 Intelligent Nightly Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Change Type**: ${{ needs.detect-changes.outputs.change_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Significant**: ${{ needs.detect-changes.outputs.significant_changes }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Commits**: ${{ needs.detect-changes.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: ${{ needs.detect-changes.outputs.files_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM**: https://www.npmjs.com/package/@mks2508/better-logger/v/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub**: https://github.com/MKS2508/advanced-logger/releases/tag/${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY  
          echo "npm install @mks2508/better-logger@nightly" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # ===== NO CHANGES HANDLER =====
  no-changes:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'false'
    
    steps:
      - name: ℹ️ No changes detected
        run: |
          echo "## ℹ️ No Nightly Build Required" >> $GITHUB_STEP_SUMMARY
          echo "No significant changes detected since last nightly build." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits**: ${{ needs.detect-changes.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Changed**: ${{ needs.detect-changes.outputs.files_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Use \`workflow_dispatch\` with \`force_build: true\` to force a build." >> $GITHUB_STEP_SUMMARY