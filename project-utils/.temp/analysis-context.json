{
  "files": [
    {
      "path": "project-utils/.temp/analysis-context.json",
      "status": "modified",
      "diff": "diff --git a/project-utils/.temp/analysis-context.json b/project-utils/.temp/analysis-context.json\nindex 85bf651..398cf26 100644\n--- a/project-utils/.temp/analysis-context.json\n+++ b/project-utils/.temp/analysis-context.json\n@@ -1,57 +1,49 @@\n {\n   \"files\": [\n     {\n-      \"path\": \"CHANGELOG.json\",\n+      \"path\": \"package.json\",\n       \"status\": \"modified\",\n-      \"diff\": \"diff --git a/CHANGELOG.json b/CHANGELOG.json\\nindex 26db34b..09b3006 100644\\n--- a/CHANGELOG.json\\n+++ b/CHANGELOG.json\\n@@ -1,6 +1,23 @@\\n {\\n-  \\\"current_version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"current_version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"versions\\\": [\\n+    {\\n+      \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n+      \\\"date\\\": \\\"2025-08-29\\\",\\n+      \\\"type\\\": \\\"patch\\\",\\n+      \\\"title\\\": \\\"Versión Alpha - Nueva funcionalidad: feat(core): mejoras y actualizaciones automáticas\\\",\\n+      \\\"changes\\\": [\\n+        {\\n+          \\\"type\\\": \\\"feature\\\",\\n+          \\\"title\\\": \\\"feat(core): mejoras y actualizaciones automáticas\\\",\\n+          \\\"description\\\": \\\"feat(core): mejoras y actualizaciones automáticas\\\"\\n+        }\\n+      ],\\n+      \\\"technical_notes\\\": \\\"\\\",\\n+      \\\"breaking_changes\\\": [],\\n+      \\\"commit_hash\\\": \\\"0e5c697086454b1a56cee3696d08e38515449217\\\",\\n+      \\\"prefix\\\": \\\"alpha\\\"\\n+    },\\n     {\\n       \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n       \\\"date\\\": \\\"2025-08-29\\\",\",\n-      \"lines_added\": 18,\n-      \"lines_removed\": 1,\n+      \"diff\": \"diff --git a/package.json b/package.json\\nindex d55f58e..ab09913 100644\\n--- a/package.json\\n+++ b/package.json\\n@@ -62,6 +62,11 @@\\n     \\\"release:github\\\": \\\"bun project-utils/github-release-manager.ts --auto-approve\\\",\\n     \\\"release:full\\\": \\\"npm run version:auto && npm run build:all && npm run release:github && npm run ci:publish\\\",\\n     \\\"release:auto\\\": \\\"bun project-utils/auto-release-gemini.ts --ai --auto-approve\\\",\\n+    \\\"release:ui\\\": \\\"bun project-utils/auto-release-ui.ts\\\",\\n+    \\\"release:hotfix\\\": \\\"bun project-utils/auto-release-ui.ts --hotfix\\\",\\n+    \\\"release:feature\\\": \\\"bun project-utils/auto-release-ui.ts --feature\\\",\\n+    \\\"release:alpha\\\": \\\"bun project-utils/auto-release-ui.ts --alpha\\\",\\n+    \\\"release:major\\\": \\\"bun project-utils/auto-release-ui.ts --major\\\",\\n     \\\"publish:core\\\": \\\"cd packages/core && npm publish --access public\\\",\\n     \\\"publish:styling\\\": \\\"cd packages/styling && npm publish --access public\\\",\\n     \\\"publish:exports\\\": \\\"cd packages/exports && npm publish --access public\\\",\",\n+      \"lines_added\": 5,\n+      \"lines_removed\": 0,\n       \"is_binary\": false\n     },\n     {\n-      \"path\": \"package.json\",\n-      \"status\": \"modified\",\n-      \"diff\": \"diff --git a/package.json b/package.json\\nindex 8701d95..eaafac6 100644\\n--- a/package.json\\n+++ b/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"State-of-the-art console logger with advanced CSS styling, SVG support, animations, and CLI interface\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\",\n-      \"lines_added\": 1,\n-      \"lines_removed\": 1,\n+      \"path\": \"project-utils/auto-release-ui.ts\",\n+      \"status\": \"added\",\n+      \"diff\": \"diff --git a/project-utils/auto-release-ui.ts b/project-utils/auto-release-ui.ts\\nnew file mode 100644\\nindex 0000000..ec9d754\\n--- /dev/null\\n+++ b/project-utils/auto-release-ui.ts\\n@@ -0,0 +1,1329 @@\\n+#!/usr/bin/env node\\n+\\n+import { execSync } from \\\"child_process\\\"\\n+import { platform } from \\\"os\\\"\\n+import { readFileSync, existsSync, writeFileSync, mkdirSync } from \\\"fs\\\"\\n+import { join } from \\\"path\\\"\\n+import { \\n+  PROJECT_COMPONENTS, \\n+  WORK_TYPES, \\n+  BUILD_MODES, \\n+  VERSION_PREFIXES,\\n+  PERFORMANCE_IMPACTS,\\n+  getComponentIds,\\n+  getWorkTypeIds,\\n+  formatComponentsList,\\n+  PROJECT_INFO\\n+} from './project-config'\\n+\\n+interface ReleaseOptions {\\n+  // General Configuration\\n+  useAI: boolean\\n+  dryRun: boolean\\n+  autoApprove: boolean\\n+  autoCommit: boolean\\n+  force: boolean\\n+  quiet: boolean\\n+  \\n+  // Version Management\\n+  versionType: 'major' | 'minor' | 'patch' | 'auto'\\n+  versionPrefix: 'alpha' | 'beta' | 'rc' | 'stable' | 'pre-alpha'\\n+  \\n+  // Build Configuration\\n+  buildMode: 'full' | 'core' | 'styling' | 'exports' | 'selective' | 'skip'\\n+  selectedModules: string[]\\n+  docsOnly: boolean\\n+  \\n+  // Commit Configuration  \\n+  workType: 'feature' | 'fix' | 'refactor' | 'docs' | 'test'\\n+  affectedComponents: string[]\\n+  context: string\\n+  performanceImpact: 'none' | 'minor' | 'major'\\n+  \\n+  // Extended Context (from auto-release-gemini.ts)\\n+  focusArea?: string\\n+  targetPlatform?: string\\n+  urgency?: string\\n+  targetAudience?: string\\n+  dependencies?: string\\n+  \\n+  // Publishing\\n+  createGitHubRelease: boolean\\n+  publishNpm: boolean\\n+  publishGitHub: boolean\\n+  npmTag?: string\\n+  \\n+  // Advanced\\n+  skipTests: boolean\\n+  skipTypeCheck: boolean\\n+  keepLocalChanges: boolean\\n+}\\n+\\n+interface UIState {\\n+  step: number\\n+  maxStep: number\\n+  config: Partial<ReleaseOptions>\\n+  canGoBack: boolean\\n+  previewCommand: string\\n+  projectStatus: ProjectStatus\\n+  selectedPreset?: string\\n+}\\n+\\n+interface ProjectStatus {\\n+  currentVersion: string\\n+  lastRelease: string\\n+  lastReleaseDate: string\\n+  gitStatus: string\\n+  isClean: boolean\\n+  hasUncommitted: boolean\\n+}\\n+\\n+interface QuickAction {\\n+  id: string\\n+  name: string\\n+  description: string\\n+  emoji: string\\n+  config: Partial<ReleaseOptions>\\n+  resultingVersion: string\\n+}\\n+\\n+class NavigationController {\\n+  private state: UIState\\n+  private history: UIState[] = []\\n+  private tempDir: string\\n+  private stateFile: string\\n+  \\n+  constructor(initialState: UIState) {\\n+    this.state = initialState\\n+    this.tempDir = join(process.cwd(), 'project-utils/.ui-temp')\\n+    this.stateFile = join(this.tempDir, 'ui-state.json')\\n+    \\n+    // Crear directorio temporal\\n+    if (!existsSync(this.tempDir)) {\\n+      mkdirSync(this.tempDir, { recursive: true })\\n+    }\\n+  }\\n+  \\n+  getCurrentState(): UIState {\\n+    return { ...this.state }\\n+  }\\n+  \\n+  goNext(newState: Partial<UIState>): UIState {\\n+    // Guardar estado actual en historial\\n+    this.history.push({ ...this.state })\\n+    \\n+    // Actualizar estado\\n+    this.state = {\\n+      ...this.state,\\n+      ...newState,\\n+      step: this.state.step + 1,\\n+      canGoBack: true\\n+    }\\n+    \\n+    // Persistir estado\\n+    this.persistState()\\n+    return { ...this.state }\\n+  }\\n+  \\n+  goBack(): UIState | null {\\n+    if (this.history.length === 0) {\\n+      return null\\n+    }\\n+    \\n+    // Restaurar estado anterior\\n+    this.state = this.history.pop()!\\n+    this.state.canGoBack = this.history.length > 0\\n+    \\n+    this.persistState()\\n+    return { ...this.state }\\n+  }\\n+  \\n+  updateConfig(config: Partial<ReleaseOptions>): void {\\n+    this.state.config = { ...this.state.config, ...config }\\n+    this.state.previewCommand = this.generatePreviewCommand()\\n+    this.persistState()\\n+  }\\n+  \\n+  private persistState(): void {\\n+    try {\\n+      writeFileSync(this.stateFile, JSON.stringify(this.state, null, 2))\\n+    } catch (error) {\\n+      // Silent fail para evitar crashes\\n+    }\\n+  }\\n+  \\n+  private generatePreviewCommand(): string {\\n+    const config = this.state.config\\n+    const args: string[] = []\\n+    \\n+    if (config.useAI) args.push(\\\"--ai\\\")\\n+    if (config.dryRun) args.push(\\\"--dry-run\\\")\\n+    if (config.autoApprove) args.push(\\\"--auto-approve\\\")\\n+    if (config.force) args.push(\\\"--force\\\")\\n+    if (config.versionType && config.versionType !== 'auto') {\\n+      args.push(`--type ${config.versionType}`)\\n+    }\\n+    if (config.versionPrefix && config.versionPrefix !== 'stable') {\\n+      args.push(`--prefix ${config.versionPrefix}`)\\n+    }\\n+    if (config.workType) args.push(`--work-type ${config.workType}`)\\n+    if (config.affectedComponents?.length) {\\n+      args.push(`--affected-components ${config.affectedComponents.join(',')}`)\\n+    }\\n+    if (config.context) args.push(`--context \\\"${config.context}\\\"`)\\n+    if (config.performanceImpact && config.performanceImpact !== 'none') {\\n+      args.push(`--performance-impact ${config.performanceImpact}`)\\n+    }\\n+    \\n+    // Extended context parameters\\n+    if (config.focusArea) args.push(`--focus \\\"${config.focusArea}\\\"`)\\n+    if (config.targetPlatform && config.targetPlatform !== 'universal') {\\n+      args.push(`--target-platform ${config.targetPlatform}`)\\n+    }\\n+    if (config.urgency && config.urgency !== 'normal') {\\n+      args.push(`--urgency ${config.urgency}`)\\n+    }\\n+    if (config.targetAudience && config.targetAudience !== 'public') {\\n+      args.push(`--audience ${config.targetAudience}`)\\n+    }\\n+    if (config.dependencies && config.dependencies !== 'both') {\\n+      args.push(`--dependencies ${config.dependencies}`)\\n+    }\\n+    \\n+    if (config.publishNpm) args.push(\\\"--publish-npm\\\")\\n+    if (config.publishGitHub) args.push(\\\"--publish-github\\\")\\n+    if (!config.createGitHubRelease) args.push(\\\"--no-github\\\")\\n+    \\n+    return `bun auto-release-gemini.ts ${args.join(' ')}`\\n+  }\\n+  \\n+  cleanup(): void {\\n+    try {\\n+      if (existsSync(this.stateFile)) {\\n+        execSync(`rm -f \\\"${this.stateFile}\\\"`)\\n+      }\\n+    } catch (error) {\\n+      // Silent cleanup\\n+    }\\n+  }\\n+}\\n+\\n+class AutoReleaseUIv2 {\\n+  private platform = platform()\\n+  private projectRoot = process.cwd()\\n+  private navigation: NavigationController\\n+  \\n+  constructor() {\\n+    const projectStatus = this.getProjectStatus()\\n+    const initialState: UIState = {\\n+      step: 1,\\n+      maxStep: 3,\\n+      config: {},\\n+      canGoBack: false,\\n+      previewCommand: \\\"\\\",\\n+      projectStatus\\n+    }\\n+    \\n+    this.navigation = new NavigationController(initialState)\\n+  }\\n+  \\n+  private getProjectStatus(): ProjectStatus {\\n+    let currentVersion = \\\"unknown\\\"\\n+    let lastRelease = \\\"none\\\"\\n+    let lastReleaseDate = \\\"never\\\"\\n+    let gitStatus = \\\"\\\"\\n+    let isClean = true\\n+    let hasUncommitted = false\\n+    \\n+    // Current version\\n+    try {\\n+      const packageJson = JSON.parse(readFileSync(join(this.projectRoot, 'package.json'), 'utf-8'))\\n+      currentVersion = packageJson.version\\n+    } catch {}\\n+    \\n+    // Last release\\n+    try {\\n+      const changelog = JSON.parse(readFileSync(join(this.projectRoot, 'CHANGELOG.json'), 'utf-8'))\\n+      const latest = changelog.versions[0]\\n+      if (latest) {\\n+        lastRelease = latest.version\\n+        lastReleaseDate = latest.date\\n+      }\\n+    } catch {}\\n+    \\n+    // Git status\\n+    try {\\n+      gitStatus = execSync('git status --porcelain', { encoding: 'utf-8' }).trim()\\n+      isClean = !gitStatus\\n+      hasUncommitted = !!gitStatus\\n+    } catch {}\\n+    \\n+    return {\\n+      currentVersion,\\n+      lastRelease,\\n+      lastReleaseDate,\\n+      gitStatus,\\n+      isClean,\\n+      hasUncommitted\\n+    }\\n+  }\\n+  \\n+  private getQuickActions(): QuickAction[] {\\n+    const current = this.navigation.getCurrentState().projectStatus.currentVersion\\n+    const [major, minor, patch, preRelease] = current.split(/[.-]/)\\n+    \\n+    return [\\n+      {\\n+        id: \\\"hotfix\\\",\\n+        name: \\\"🚨 Hotfix\\\",\\n+        description: \\\"Critical patch + immediate publish\\\",\\n+        emoji: \\\"🚨\\\",\\n+        config: {\\n+          versionType: 'patch',\\n+          versionPrefix: 'stable',\\n+          buildMode: 'full',\\n+          workType: 'fix',\\n+          useAI: true,\\n+          createGitHubRelease: true,\\n+          publishNpm: true,\\n+          autoApprove: true\\n+        },\\n+        resultingVersion: `${major}.${minor}.${parseInt(patch) + 1}`\\n+      },\\n+      {\\n+        id: \\\"feature\\\",\\n+        name: \\\"✨ Feature\\\",\\n+        description: \\\"New feature + GitHub release\\\",\\n+        emoji: \\\"✨\\\",\\n+        config: {\\n+          versionType: 'minor',\\n+          versionPrefix: 'stable',\\n+          buildMode: 'full',\\n+          workType: 'feature',\\n+          useAI: true,\\n+          createGitHubRelease: true,\\n+          publishNpm: false\\n+        },\\n+        resultingVersion: `${major}.${parseInt(minor) + 1}.0`\\n+      },\\n+      {\\n+        id: \\\"alpha\\\",\\n+        name: \\\"🧪 Alpha\\\",\\n+        description: \\\"Testing release + GitHub packages\\\",\\n+        emoji: \\\"🧪\\\",\\n+        config: {\\n+          versionType: 'minor',\\n+          versionPrefix: 'alpha',\\n+          buildMode: 'full',\\n+          workType: 'feature',\\n+          useAI: true,\\n+          createGitHubRelease: true,\\n+          publishGitHub: true,\\n+          publishNpm: false\\n+        },\\n+        resultingVersion: `${major}.${parseInt(minor) + 1}.0-alpha.1`\\n+      },\\n+      {\\n+        id: \\\"major\\\",\\n+        name: \\\"💥 Major\\\",\\n+        description: \\\"Breaking changes + full release\\\",\\n+        emoji: \\\"💥\\\",\\n+        config: {\\n+          versionType: 'major',\\n+          versionPrefix: 'stable',\\n+          buildMode: 'full',\\n+          workType: 'feature',\\n+          useAI: true,\\n+          createGitHubRelease: true,\\n+          publishNpm: true,\\n+          performanceImpact: 'major'\\n+        },\\n+        resultingVersion: `${parseInt(major) + 1}.0.0`\\n+      }\\n+    ]\\n+  }\\n+  \\n+  async collectReleaseInfo(): Promise<ReleaseOptions> {\\n+    try {\\n+      if (this.platform === \\\"darwin\\\") {\\n+        return await this.macOSWizard()\\n+      } else if (this.platform === \\\"linux\\\") {\\n+        return await this.linuxWizard()\\n+      } else {\\n+        return await this.fallbackWizard()\\n+      }\\n+    } catch (error) {\\n+      if (error instanceof Error && error.message === \\\"Cancelled\\\") {\\n+        console.log(\\\"❌ Release cancelled by user\\\")\\n+        process.exit(0)\\n+      }\\n+      console.log(\\\"⚠️ GUI not available, falling back to text input\\\")\\n+      return await this.fallbackWizard()\\n+    } finally {\\n+      this.navigation.cleanup()\\n+    }\\n+  }\\n+  \\n+  private async macOSWizard(): Promise<ReleaseOptions> {\\n+    let state = this.navigation.getCurrentState()\\n+    \\n+    while (state.step <= state.maxStep) {\\n+      switch (state.step) {\\n+        case 1:\\n+          state = await this.macOSStep1_Welcome(state)\\n+          break\\n+        case 2:\\n+          state = await this.macOSStep2_Configuration(state)\\n+          break\\n+        case 3:\\n+          state = await this.macOSStep3_Confirmation(state)\\n+          break\\n+        default:\\n+          return state.config as ReleaseOptions\\n+      }\\n+    }\\n+    \\n+    return state.config as ReleaseOptions\\n+  }\\n+  \\n+  private async macOSStep1_Welcome(currentState: UIState): Promise<UIState> {\\n+    // First handle commits if needed\\n+    const updatedState = await this.handleUncommittedChanges(currentState)\\n+    \\n+    const status = updatedState.projectStatus\\n+    const quickActions = this.getQuickActions()\\n+    \\n+    // Build the action options with actual values\\n+    const actionOptions = [\\n+      `🚨 Hotfix → ${quickActions[0].resultingVersion} (patch + publish)`,\\n+      `✨ Feature → ${quickActions[1].resultingVersion} (minor + GitHub)`,\\n+      `🧪 Alpha → ${quickActions[2].resultingVersion} (test + packages)`,\\n+      `💥 Major → ${quickActions[3].resultingVersion} (breaking + full)`,\\n+      `⚙️ Custom Configuration...`\\n+    ]\\n+    \\n+    const statusText = `🚀 AUTO-RELEASE MANAGER v2.0\\\\\\\\n` +\\n+      `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n\\\\\\\\n` +\\n+      `📊 PROJECT STATUS:\\\\\\\\n` +\\n+      `${status.isClean ? '✅' : '⚠️'} Git: ${status.isClean ? 'Clean working directory' : 'Has uncommitted changes'}\\\\\\\\n` +\\n+      `📦 Version: ${status.currentVersion}\\\\\\\\n` +\\n+      `📋 Last: ${status.lastRelease} (${status.lastReleaseDate})\\\\\\\\n\\\\\\\\n` +\\n+      `🎯 SELECT ACTION:`\\n+    \\n+    const script = `\\n+      const app = Application.currentApplication()\\n+      app.includeStandardAdditions = true\\n+      \\n+      const statusText = \\\"${statusText}\\\"\\n+      \\n+      const actionOptions = ${JSON.stringify(actionOptions)}\\n+      \\n+      const result = app.chooseFromList(actionOptions, {\\n+        withTitle: \\\"🚀 Auto-Release Manager\\\",\\n+        withPrompt: statusText,\\n+        defaultItems: [\\\"⚙️ Custom Configuration...\\\"],\\n+        multipleSelectionsAllowed: false\\n+      })\\n+      \\n+      if (result === false) {\\n+        throw new Error(\\\"Cancelled\\\")\\n+      }\\n+      \\n+      const selected = result[0]\\n+      \\n+      if (selected.includes(\\\"Hotfix\\\")) {\\n+        JSON.stringify({ action: \\\"hotfix\\\", preset: \\\"Hotfix\\\" })\\n+      } else if (selected.includes(\\\"Feature\\\")) {\\n+        JSON.stringify({ action: \\\"feature\\\", preset: \\\"Feature Release\\\" })\\n+      } else if (selected.includes(\\\"Alpha\\\")) {\\n+        JSON.stringify({ action: \\\"alpha\\\", preset: \\\"Alpha Testing\\\" })\\n+      } else if (selected.includes(\\\"Major\\\")) {\\n+        JSON.stringify({ action: \\\"major\\\", preset: \\\"Major Release\\\" })\\n+      } else {\\n+        JSON.stringify({ action: \\\"custom\\\", preset: null })\\n+      }\\n+    `\\n+    \\n+    try {\\n+      const result = execSync(`osascript -l JavaScript -e '${script.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+      const choice = JSON.parse(result)\\n+      \\n+      if (choice.action !== \\\"custom\\\") {\\n+        // Quick action selected - apply preset and skip to confirmation\\n+        const quickAction = quickActions.find(qa => qa.id === choice.action)!\\n+        return this.navigation.goNext({\\n+          step: 3, // Skip to confirmation\\n+          config: {\\n+            ...quickAction.config,\\n+            context: `${quickAction.description} release`,\\n+            affectedComponents: ['core']\\n+          },\\n+          selectedPreset: choice.preset,\\n+          projectStatus: updatedState.projectStatus\\n+        })\\n+      } else {\\n+        // Custom configuration\\n+        return this.navigation.goNext({\\n+          config: {\\n+            useAI: true,\\n+            dryRun: false,\\n+            autoApprove: false\\n+          },\\n+          projectStatus: updatedState.projectStatus\\n+        })\\n+      }\\n+    } catch (error) {\\n+      throw new Error(\\\"Cancelled\\\")\\n+    }\\n+  }\\n+  \\n+  private async macOSStep2_Configuration(currentState: UIState): Promise<UIState> {\\n+    const config = currentState.config\\n+    \\n+    // Collect all configuration in a series of dialogs\\n+    const versionScript = `\\n+      const app = Application.currentApplication()\\n+      app.includeStandardAdditions = true\\n+      \\n+      // Version Type Selection - build dynamic versions\\n+      const currentVersion = \\\"${currentState.projectStatus.currentVersion}\\\"\\n+      const versionTypes = [\\n+        \\\"patch → \\\" + currentVersion.replace(/\\\\\\\\d+$/, (m) => String(parseInt(m) + 1)) + \\\" (bug fixes)\\\",\\n+        \\\"minor → \\\" + currentVersion.replace(/\\\\\\\\d+\\\\\\\\.\\\\\\\\d+/, (m) => m.replace(/\\\\\\\\d+$/, (n) => String(parseInt(n) + 1)) + '.0') + \\\" (new features)\\\", \\n+        \\\"major → \\\" + currentVersion.replace(/^\\\\\\\\d+/, (m) => String(parseInt(m) + 1)) + '.0.0' + \\\" (breaking changes)\\\",\\n+        \\\"auto → AI-detected based on commits\\\"\\n+      ]\\n+      \\n+      const versionResult = app.chooseFromList(versionTypes, {\\n+        withTitle: \\\"📦 VERSIONING (Step 2/6)\\\",\\n+        withPrompt: \\\"Current: \\\" + currentVersion + \\\"\\\\\\\\nLast Release: ${currentState.projectStatus.lastRelease}\\\\\\\\n\\\\\\\\nSelect version increment:\\\",\\n+        defaultItems: [versionTypes[0]]\\n+      })\\n+      \\n+      if (versionResult === false) {\\n+        JSON.stringify({ action: \\\"back\\\" })\\n+      } else {\\n+        const versionType = versionResult[0].split(\\\" \\\")[0]\\n+        \\n+        // Version Prefix Selection - using centralized config\\n+        const prefixes = [\\n+          \\\"stable (Production-ready release)\\\",\\n+          \\\"alpha (Early testing and development)\\\",\\n+          \\\"beta (Feature-complete testing phase)\\\",\\n+          \\\"rc (Final testing before stable release)\\\",\\n+          \\\"pre-alpha (Experimental and unstable features)\\\"\\n+        ]\\n+        \\n+        const prefixResult = app.chooseFromList(prefixes, {\\n+          withTitle: \\\"🏷️ VERSION PREFIX (Step 3/6)\\\",\\n+          withPrompt: \\\"Version Type: \\\" + versionType + \\\"\\\\\\\\n\\\\\\\\nSelect version prefix:\\\",\\n+          defaultItems: [\\\"stable (production ready)\\\"]\\n+        })\\n+        \\n+        if (prefixResult === false) {\\n+          JSON.stringify({ action: \\\"back\\\" })\\n+        } else {\\n+          const prefix = prefixResult[0].split(\\\" \\\")[0]\\n+          JSON.stringify({ \\n+            action: \\\"next\\\",\\n+            versionType: versionType,\\n+            versionPrefix: prefix\\n+          })\\n+        }\\n+      }\\n+    `\\n+    \\n+    try {\\n+      const versionResult = execSync(`osascript -l JavaScript -e '${versionScript.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+      const versionChoice = JSON.parse(versionResult)\\n+      \\n+      if (versionChoice.action === \\\"back\\\") {\\n+        return this.navigation.goBack()!\\n+      }\\n+      \\n+      // Build Configuration\\n+      const buildScript = `\\n+        const app = Application.currentApplication()\\n+        app.includeStandardAdditions = true\\n+        \\n+        // Build modes - using centralized config\\n+        const buildModes = [\\n+          \\\"full (Complete bundle with all modules)\\\",\\n+          \\\"core (Essential logging functionality - minimal size)\\\",\\n+          \\\"styling (Core + visual features and theming)\\\",\\n+          \\\"exports (Core + export handlers and remote logging)\\\",\\n+          \\\"selective (Choose specific modules to include)\\\",\\n+          \\\"skip (Use existing build artifacts)\\\"\\n+        ]\\n+        \\n+        const buildResult = app.chooseFromList(buildModes, {\\n+          withTitle: \\\"🔨 BUILD CONFIGURATION (Step 4/6)\\\",\\n+          withPrompt: \\\"Version: ${versionChoice.versionType} (${versionChoice.versionPrefix})\\\\\\\\n\\\\\\\\nSelect build mode:\\\",\\n+          defaultItems: [\\\"full (all modules + complete bundle)\\\"]\\n+        })\\n+        \\n+        if (buildResult === false) {\\n+          JSON.stringify({ action: \\\"back\\\" })\\n+        } else {\\n+          const buildMode = buildResult[0].split(\\\" \\\")[0]\\n+          JSON.stringify({\\n+            action: \\\"next\\\",\\n+            buildMode: buildMode\\n+          })\\n+        }\\n+      `\\n+      \\n+      const buildResult = execSync(`osascript -l JavaScript -e '${buildScript.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+      const buildChoice = JSON.parse(buildResult)\\n+      \\n+      if (buildChoice.action === \\\"back\\\") {\\n+        return this.navigation.goBack()!\\n+      }\\n+      \\n+      // Work Details\\n+      const workScript = `\\n+        const app = Application.currentApplication()\\n+        app.includeStandardAdditions = true\\n+        \\n+        // Get context\\n+        const contextResult = app.displayDialog(\\\"💭 DESCRIBE CHANGES (Step 5/6)\\\\\\\\n\\\\\\\\nDescribe what you implemented/fixed:\\\", {\\n+          defaultAnswer: \\\"\\\",\\n+          withTitle: \\\"🚀 Release Context\\\",\\n+          buttons: [\\\"← Back\\\", \\\"Next →\\\"],\\n+          defaultButton: \\\"Next →\\\"\\n+        })\\n+        \\n+        if (contextResult.buttonReturned === \\\"← Back\\\") {\\n+          JSON.stringify({ action: \\\"back\\\" })\\n+        } else {\\n+          const context = contextResult.textReturned\\n+          \\n+          // Work type - using centralized config\\n+          const workTypes = [\\n+            \\\"feature (New functionality or capabilities)\\\",\\n+            \\\"fix (Bug fixes and issue resolution)\\\", \\n+            \\\"refactor (Code improvements without functional changes)\\\",\\n+            \\\"docs (Documentation updates and improvements)\\\",\\n+            \\\"test (Testing improvements and new test cases)\\\",\\n+            \\\"chore (Maintenance tasks and dependency updates)\\\",\\n+            \\\"perf (Performance improvements and optimizations)\\\"\\n+          ]\\n+          \\n+          const workResult = app.chooseFromList(workTypes, {\\n+            withTitle: \\\"🏷️ WORK TYPE (Step 6/6)\\\",\\n+            withPrompt: \\\"Context: \\\" + context + \\\"\\\\\\\\n\\\\\\\\nSelect primary work type:\\\",\\n+            defaultItems: [\\\"feature (new functionality)\\\"]\\n+          })\\n+          \\n+          if (workResult === false) {\\n+            JSON.stringify({ action: \\\"back\\\" })\\n+          } else {\\n+            const workType = workResult[0].split(\\\" \\\")[0]\\n+            \\n+            // Components - using centralized config\\n+            const components = [\\n+              \\\"core (Core logging functionality and Logger class)\\\",\\n+              \\\"styling (Visual features, themes, and CSS styling system)\\\", \\n+              \\\"exports (Export handlers and remote logging capabilities)\\\",\\n+              \\\"cli (Command-line interface and utilities)\\\",\\n+              \\\"docs (Documentation, README files, and guides)\\\",\\n+              \\\"tests (Test suites, fixtures, and testing utilities)\\\",\\n+              \\\"examples (Usage examples and sample applications)\\\",\\n+              \\\"workflows (GitHub Actions workflows and CI/CD configuration)\\\"\\n+            ]\\n+            const componentResult = app.chooseFromList(components, {\\n+              withTitle: \\\"📦 AFFECTED COMPONENTS\\\",\\n+              withPrompt: \\\"Context: \\\" + context + \\\"\\\\\\\\nType: \\\" + workType + \\\"\\\\\\\\n\\\\\\\\nSelect affected components:\\\",\\n+              multipleSelectionsAllowed: true,\\n+              defaultItems: [\\\"core (Core logging functionality and Logger class)\\\"]\\n+            })\\n+            \\n+            const affectedComponents = componentResult === false ? [\\\"core\\\"] : componentResult.map(c => c.split(\\\" \\\")[0])\\n+            \\n+            JSON.stringify({\\n+              action: \\\"next\\\",\\n+              context: context,\\n+              workType: workType,\\n+              affectedComponents: affectedComponents\\n+            })\\n+          }\\n+        }\\n+      `\\n+      \\n+      const workResult = execSync(`osascript -l JavaScript -e '${workScript.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+      const workChoice = JSON.parse(workResult)\\n+      \\n+      if (workChoice.action === \\\"back\\\") {\\n+        return this.navigation.goBack()!\\n+      }\\n+      \\n+      // Publishing options - quick dialog\\n+      const publishScript = `\\n+        const app = Application.currentApplication()\\n+        app.includeStandardAdditions = true\\n+        \\n+        const publishOptions = [\\n+          \\\"GitHub Release only\\\",\\n+          \\\"NPM Registry + GitHub Release\\\", \\n+          \\\"GitHub Packages + GitHub Release\\\",\\n+          \\\"Full publish (NPM + GitHub + Packages)\\\",\\n+          \\\"No publishing\\\"\\n+        ]\\n+        \\n+        const publishResult = app.chooseFromList(publishOptions, {\\n+          withTitle: \\\"📤 PUBLISHING OPTIONS\\\",\\n+          withPrompt: \\\"Select publishing targets:\\\",\\n+          defaultItems: [\\\"GitHub Release only\\\"]\\n+        })\\n+        \\n+        if (publishResult === false) {\\n+          JSON.stringify({ action: \\\"back\\\" })\\n+        } else {\\n+          const selected = publishResult[0]\\n+          JSON.stringify({\\n+            action: \\\"next\\\",\\n+            publishOption: selected\\n+          })\\n+        }\\n+      `\\n+      \\n+      const publishResult = execSync(`osascript -l JavaScript -e '${publishScript.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+      const publishChoice = JSON.parse(publishResult)\\n+      \\n+      if (publishChoice.action === \\\"back\\\") {\\n+        return this.navigation.goBack()!\\n+      }\\n+      \\n+      // Build final configuration\\n+      const finalConfig: Partial<ReleaseOptions> = {\\n+        ...config,\\n+        versionType: versionChoice.versionType as any,\\n+        versionPrefix: versionChoice.versionPrefix as any,\\n+        buildMode: buildChoice.buildMode as any,\\n+        context: workChoice.context,\\n+        workType: workChoice.workType as any,\\n+        affectedComponents: workChoice.affectedComponents,\\n+        createGitHubRelease: !publishChoice.publishOption.includes(\\\"No publishing\\\"),\\n+        publishNpm: publishChoice.publishOption.includes(\\\"NPM Registry\\\"),\\n+        publishGitHub: publishChoice.publishOption.includes(\\\"GitHub Packages\\\"),\\n+        performanceImpact: 'none',\\n+        useAI: true,\\n+        selectedModules: [],\\n+        docsOnly: false,\\n+        skipTests: false,\\n+        skipTypeCheck: false,\\n+        keepLocalChanges: false\\n+      }\\n+      \\n+      return this.navigation.goNext({\\n+        config: finalConfig\\n+      })\\n+      \\n+    } catch (error) {\\n+      throw new Error(\\\"Cancelled\\\")\\n+    }\\n+  }\\n+  \\n+  private async macOSStep3_Confirmation(currentState: UIState): Promise<UIState> {\\n+    const config = currentState.config\\n+    const preview = this.navigation.getCurrentState().previewCommand\\n+    \\n+    const script = `\\n+      const app = Application.currentApplication()\\n+      app.includeStandardAdditions = true\\n+      \\n+      const summary = \\\"🚀 FINAL CONFIRMATION (Step 3/3)\\\\\\\\n\\\" +\\n+        \\\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n\\\\\\\\n\\\" +\\n+        \\\"✅ READY TO EXECUTE:\\\\\\\\n\\\" +\\n+        \\\"━━━━━━━━━━━━━━━━━━\\\\\\\\n\\\\\\\\n\\\" +\\n+        \\\"🎯 Actions that will be performed:\\\\\\\\n\\\" +\\n+        \\\"1. ${config.autoCommit ? 'Auto-commit pending changes' : 'Use current committed state'}\\\\\\\\n\\\" +\\n+        \\\"2. Generate version: ${config.versionType} (${config.versionPrefix})\\\\\\\\n\\\" +\\n+        \\\"3. Build: ${config.buildMode} modules\\\\\\\\n\\\" +\\n+        \\\"4. ${config.useAI ? 'Generate AI documentation with Gemini' : 'Generate basic documentation'}\\\\\\\\n\\\" +\\n+        \\\"5. Commit: ${config.workType}(${(config.affectedComponents || []).join(',')})\\\\\\\\n\\\" +\\n+        \\\"6. ${config.createGitHubRelease ? 'Create GitHub Release' : 'Skip GitHub Release'}\\\\\\\\n\\\" +\\n+        \\\"7. ${config.publishNpm ? 'Publish to NPM Registry' : ''}${config.publishGitHub ? 'Publish to GitHub Packages' : ''}\\\\\\\\n\\\\\\\\n\\\" +\\n+        \\\"⏱️ Estimated time: 3-5 minutes\\\\\\\\n\\\" +\\n+        \\\"💾 Backup: Auto-backup branch will be created\\\\\\\\n\\\\\\\\n\\\" +\\n+        \\\"🔍 PREVIEW COMMAND:\\\\\\\\n\\\" +\\n+        \\\"${preview}\\\"\\n+      \\n+      const result = app.displayDialog(summary, {\\n+        withTitle: \\\"🚀 Execute Release\\\",\\n+        buttons: [\\\"← Back\\\", \\\"Cancel\\\", \\\"🚀 Execute\\\"],\\n+        defaultButton: \\\"🚀 Execute\\\"\\n+      })\\n+      \\n+      if (result.buttonReturned === \\\"← Back\\\") {\\n+        JSON.stringify({ action: \\\"back\\\" })\\n+      } else if (result.buttonReturned === \\\"Cancel\\\") {\\n+        JSON.stringify({ action: \\\"cancel\\\" })\\n+      } else {\\n+        JSON.stringify({ action: \\\"execute\\\" })\\n+      }\\n+    `\\n+    \\n+    try {\\n+      const result = execSync(`osascript -l JavaScript -e '${script.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+      const choice = JSON.parse(result)\\n+      \\n+      if (choice.action === \\\"back\\\") {\\n+        return this.navigation.goBack()!\\n+      } else if (choice.action === \\\"cancel\\\") {\\n+        throw new Error(\\\"Cancelled\\\")\\n+      } else {\\n+        // Ready to execute\\n+        return this.navigation.goNext({\\n+          step: 4 // Beyond maxStep to exit wizard\\n+        })\\n+      }\\n+    } catch (error) {\\n+      throw new Error(\\\"Cancelled\\\")\\n+    }\\n+  }\\n+  \\n+  private async linuxWizard(): Promise<ReleaseOptions> {\\n+    // Simplified Linux implementation\\n+    console.log(\\\"🐧 Linux wizard not fully implemented yet\\\")\\n+    return this.fallbackWizard()\\n+  }\\n+  \\n+  private async fallbackWizard(): Promise<ReleaseOptions> {\\n+    const readline = require('readline').createInterface({\\n+      input: process.stdin,\\n+      output: process.stdout\\n+    })\\n+    \\n+    const question = (prompt: string): Promise<string> => {\\n+      return new Promise((resolve) => {\\n+        readline.question(prompt, resolve)\\n+      })\\n+    }\\n+    \\n+    console.log(\\\"\\\\n🚀 AUTO-RELEASE MANAGER\\\")\\n+    console.log(\\\"=\\\" .repeat(50))\\n+    \\n+    const status = this.navigation.getCurrentState().projectStatus\\n+    console.log(`📦 Current: ${status.currentVersion}`)\\n+    console.log(`📋 Last: ${status.lastRelease} (${status.lastReleaseDate})`)\\n+    console.log(`${status.isClean ? '✅' : '⚠️'} Git: ${status.isClean ? 'Clean' : 'Has changes'}`)\\n+    \\n+    console.log(\\\"\\\\nQuick actions:\\\")\\n+    const quickActions = this.getQuickActions()\\n+    quickActions.forEach((action, i) => {\\n+      console.log(`${i + 1}. ${action.emoji} ${action.name} → ${action.resultingVersion}`)\\n+    })\\n+    console.log(`${quickActions.length + 1}. ⚙️ Custom configuration`)\\n+    \\n+    const choice = await question(`\\\\nSelect (1-${quickActions.length + 1}): `)\\n+    const choiceNum = parseInt(choice)\\n+    \\n+    if (choiceNum >= 1 && choiceNum <= quickActions.length) {\\n+      const selected = quickActions[choiceNum - 1]\\n+      const config: ReleaseOptions = {\\n+        ...selected.config,\\n+        context: `${selected.description} release`,\\n+        affectedComponents: ['core'],\\n+        selectedModules: [],\\n+        docsOnly: false,\\n+        skipTests: false,\\n+        skipTypeCheck: false,\\n+        keepLocalChanges: false\\n+      } as ReleaseOptions\\n+      \\n+      console.log(`\\\\n✅ Selected: ${selected.name}`)\\n+      console.log(`📋 Will create: ${selected.resultingVersion}`)\\n+      \\n+      const confirm = await question(\\\"Continue? (y/n): \\\")\\n+      if (confirm.toLowerCase() !== 'y') {\\n+        throw new Error(\\\"Cancelled\\\")\\n+      }\\n+      \\n+      readline.close()\\n+      return config\\n+    } else {\\n+      // Custom configuration - simplified\\n+      console.log(\\\"\\\\n⚙️ Custom Configuration\\\")\\n+      const versionType = await question(\\\"Version type (patch/minor/major) [patch]: \\\") || \\\"patch\\\"\\n+      const workType = await question(`Work type (${getWorkTypeIds().slice(0, 5).join('/')}) [feature]: `) || \\\"feature\\\"\\n+      const context = await question(\\\"Describe changes: \\\")\\n+      const componentsInput = await question(`Components (${getComponentIds().join(',')}): `) || \\\"core\\\"\\n+      const publishNpm = await question(\\\"Publish to NPM? (y/n) [n]: \\\")\\n+      \\n+      readline.close()\\n+      \\n+      return {\\n+        versionType: versionType as any,\\n+        versionPrefix: 'stable',\\n+        buildMode: 'full',\\n+        workType: workType as any,\\n+        context,\\n+        affectedComponents: componentsInput.split(\\\",\\\").map(c => c.trim()),\\n+        createGitHubRelease: true,\\n+        publishNpm: publishNpm.toLowerCase() === 'y',\\n+        publishGitHub: false,\\n+        useAI: true,\\n+        dryRun: false,\\n+        autoApprove: false,\\n+        autoCommit: false,\\n+        force: false,\\n+        quiet: false,\\n+        selectedModules: [],\\n+        docsOnly: false,\\n+        performanceImpact: 'none',\\n+        skipTests: false,\\n+        skipTypeCheck: false,\\n+        keepLocalChanges: false\\n+      }\\n+    }\\n+  }\\n+  \\n+  async executeRelease(options: ReleaseOptions): Promise<void> {\\n+    console.log(\\\"\\\\n🚀 Executing Auto-Release...\\\")\\n+    console.log(\\\"=============================\\\")\\n+    \\n+    // Build command arguments\\n+    const args: string[] = []\\n+    \\n+    if (options.useAI) args.push(\\\"--ai\\\")\\n+    if (options.dryRun) args.push(\\\"--dry-run\\\")\\n+    if (options.autoApprove) args.push(\\\"--auto-approve\\\")\\n+    if (options.autoCommit) args.push(\\\"--auto-commit\\\")\\n+    if (options.force) args.push(\\\"--force\\\")\\n+    if (options.versionType !== 'auto') {\\n+      args.push(\\\"--type\\\", options.versionType)\\n+    }\\n+    if (options.versionPrefix !== 'stable') {\\n+      args.push(\\\"--prefix\\\", options.versionPrefix)\\n+    }\\n+    args.push(\\\"--work-type\\\", options.workType)\\n+    args.push(\\\"--affected-components\\\", options.affectedComponents.join(\\\",\\\"))\\n+    args.push(\\\"--context\\\", `\\\"${options.context}\\\"`)\\n+    if (options.performanceImpact !== 'none') {\\n+      args.push(\\\"--performance-impact\\\", options.performanceImpact)\\n+    }\\n+    \\n+    // Extended context parameters\\n+    if (options.focusArea) {\\n+      args.push(\\\"--focus\\\", `\\\"${options.focusArea}\\\"`)\\n+    }\\n+    if (options.targetPlatform && options.targetPlatform !== 'universal') {\\n+      args.push(\\\"--target-platform\\\", options.targetPlatform)\\n+    }\\n+    if (options.urgency && options.urgency !== 'normal') {\\n+      args.push(\\\"--urgency\\\", options.urgency)\\n+    }\\n+    if (options.targetAudience && options.targetAudience !== 'public') {\\n+      args.push(\\\"--audience\\\", options.targetAudience)\\n+    }\\n+    if (options.dependencies && options.dependencies !== 'both') {\\n+      args.push(\\\"--dependencies\\\", options.dependencies)\\n+    }\\n+    \\n+    if (!options.createGitHubRelease) args.push(\\\"--no-github\\\")\\n+    if (options.publishNpm) args.push(\\\"--publish-npm\\\")\\n+    if (options.publishGitHub) args.push(\\\"--publish-github\\\")\\n+    \\n+    const command = `bun project-utils/auto-release-gemini.ts ${args.join(\\\" \\\")}`\\n+    console.log(`\\\\n📋 Executing: ${command}`)\\n+    console.log(\\\"=\\\" .repeat(50))\\n+    \\n+    try {\\n+      execSync(command, { stdio: 'inherit' })\\n+      console.log(\\\"\\\\n✅ Release completed successfully!\\\")\\n+    } catch (error) {\\n+      console.error(\\\"\\\\n❌ Release failed:\\\", error)\\n+      console.log(\\\"\\\\n🔧 Troubleshooting:\\\")\\n+      console.log(\\\"- Check git status: git status\\\")\\n+      console.log(\\\"- View recent commits: git log --oneline -5\\\")\\n+      console.log(\\\"- Retry with --dry-run to test\\\")\\n+      process.exit(1)\\n+    }\\n+  }\\n+  \\n+  private async handleUncommittedChanges(currentState: UIState): Promise<UIState> {\\n+    const status = currentState.projectStatus\\n+    \\n+    if (!status.hasUncommitted) {\\n+      // No hay cambios, mostrar commits desde última release\\n+      return await this.showCommitsSinceLastRelease(currentState)\\n+    }\\n+    \\n+    // Hay cambios no commiteados - proponer commit\\n+    if (this.platform === \\\"darwin\\\") {\\n+      return await this.macOSCommitDialog(currentState)\\n+    } else {\\n+      return await this.fallbackCommitDialog(currentState)\\n+    }\\n+  }\\n+  \\n+  private async showCommitsSinceLastRelease(currentState: UIState): Promise<UIState> {\\n+    try {\\n+      // Obtener commits desde la última release\\n+      const lastTag = execSync('git describe --tags --abbrev=0 2>/dev/null || echo \\\"HEAD~10\\\"', { encoding: 'utf-8' }).trim()\\n+      const commits = execSync(`git log ${lastTag}..HEAD --oneline`, { encoding: 'utf-8' }).trim()\\n+      \\n+      if (this.platform === \\\"darwin\\\") {\\n+        const script = `\\n+          const app = Application.currentApplication()\\n+          app.includeStandardAdditions = true\\n+          \\n+          const commitsText = \\\"${commits.replace(/\\\\n/g, '\\\\\\\\n')}\\\"\\n+          const message = \\\"📋 COMMITS SINCE LAST RELEASE\\\\\\\\n\\\" +\\n+            \\\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n\\\\\\\\n\\\" +\\n+            \\\"✅ Working directory is clean\\\\\\\\n\\\" +\\n+            \\\"📦 Last release: ${currentState.projectStatus.lastRelease}\\\\\\\\n\\\\\\\\n\\\" +\\n+            \\\"🎯 Commits to be included:\\\\\\\\n\\\" +\\n+            (commitsText || \\\"No new commits since last release\\\") + \\\"\\\\\\\\n\\\\\\\\n\\\" +\\n+            \\\"Ready to proceed with release?\\\"\\n+          \\n+          const result = app.displayDialog(message, {\\n+            withTitle: \\\"🚀 Release Preview\\\",\\n+            buttons: [\\\"Cancel\\\", \\\"Continue →\\\"],\\n+            defaultButton: \\\"Continue →\\\"\\n+          })\\n+          \\n+          if (result.buttonReturned === \\\"Cancel\\\") {\\n+            JSON.stringify({ action: \\\"cancel\\\" })\\n+          } else {\\n+            JSON.stringify({ action: \\\"continue\\\" })\\n+          }\\n+        `\\n+        \\n+        const result = execSync(`osascript -l JavaScript -e '${script.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+        const choice = JSON.parse(result)\\n+        \\n+        if (choice.action === \\\"cancel\\\") {\\n+          throw new Error(\\\"Cancelled\\\")\\n+        }\\n+        \\n+        return currentState // Continue with existing flow\\n+      } else {\\n+        console.log(\\\"\\\\n📋 COMMITS SINCE LAST RELEASE:\\\")\\n+        console.log(\\\"=\\\" .repeat(50))\\n+        console.log(`Last release: ${currentState.projectStatus.lastRelease}`)\\n+        console.log(\\\"\\\\nCommits to include:\\\")\\n+        console.log(commits || \\\"No new commits since last release\\\")\\n+        console.log(\\\"\\\\n✅ Working directory is clean - ready for release\\\")\\n+        \\n+        return currentState\\n+      }\\n+    } catch (error) {\\n+      console.warn(\\\"⚠️ Could not fetch commit history\\\")\\n+      return currentState\\n+    }\\n+  }\\n+  \\n+  private async macOSCommitDialog(currentState: UIState): Promise<UIState> {\\n+    const status = currentState.projectStatus\\n+    \\n+    const script = `\\n+      const app = Application.currentApplication()\\n+      app.includeStandardAdditions = true\\n+      \\n+      const changesText = \\\"${status.gitStatus.split('\\\\n').slice(0, 10).join('\\\\\\\\n').replace(/\\\"/g, '\\\\\\\\\\\"')}\\\"\\n+      const message = \\\"⚠️ UNCOMMITTED CHANGES DETECTED\\\\\\\\n\\\" +\\n+        \\\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n\\\\\\\\n\\\" +\\n+        \\\"📝 Files with changes:\\\\\\\\n\\\" +\\n+        changesText + \\\"\\\\\\\\n\\\\\\\\n\\\" +\\n+        \\\"🤔 What would you like to do?\\\"\\n+      \\n+      const options = [\\n+        \\\"🤖 Use Commit UI (interactive)\\\",\\n+        \\\"📝 Quick commit (auto-generated)\\\",\\n+        \\\"⏭️ Skip commit (use as-is)\\\",\\n+        \\\"❌ Cancel release\\\"\\n+      ]\\n+      \\n+      const result = app.chooseFromList(options, {\\n+        withTitle: \\\"🚀 Handle Changes\\\",\\n+        withPrompt: message,\\n+        defaultItems: [\\\"🤖 Use Commit UI (interactive)\\\"]\\n+      })\\n+      \\n+      if (result === false) {\\n+        JSON.stringify({ action: \\\"cancel\\\" })\\n+      } else {\\n+        const selected = result[0]\\n+        if (selected.includes(\\\"Commit UI\\\")) {\\n+          JSON.stringify({ action: \\\"commit-ui\\\" })\\n+        } else if (selected.includes(\\\"Quick commit\\\")) {\\n+          JSON.stringify({ action: \\\"quick-commit\\\" })\\n+        } else if (selected.includes(\\\"Skip\\\")) {\\n+          JSON.stringify({ action: \\\"skip\\\" })\\n+        } else {\\n+          JSON.stringify({ action: \\\"cancel\\\" })\\n+        }\\n+      }\\n+    `\\n+    \\n+    try {\\n+      const result = execSync(`osascript -l JavaScript -e '${script.replace(/'/g, \\\"\\\\\\\\'\\\")}'`, { encoding: 'utf-8' }).trim()\\n+      const choice = JSON.parse(result)\\n+      \\n+      switch (choice.action) {\\n+        case \\\"commit-ui\\\":\\n+          console.log(\\\"🚀 Launching interactive commit UI...\\\")\\n+          execSync('bun project-utils/commit-ui.ts', { stdio: 'inherit' })\\n+          // Refresh project status after commit\\n+          const newStatus = this.getProjectStatus()\\n+          return { ...currentState, projectStatus: newStatus }\\n+          \\n+        case \\\"quick-commit\\\":\\n+          console.log(\\\"📝 Creating quick commit...\\\")\\n+          execSync('bun project-utils/commit-generator.ts --auto-approve --context \\\"Pre-release changes\\\"', { stdio: 'inherit' })\\n+          const refreshedStatus = this.getProjectStatus()\\n+          return { ...currentState, projectStatus: refreshedStatus }\\n+          \\n+        case \\\"skip\\\":\\n+          console.log(\\\"⏭️ Proceeding with uncommitted changes...\\\")\\n+          return currentState\\n+          \\n+        default:\\n+          throw new Error(\\\"Cancelled\\\")\\n+      }\\n+    } catch (error) {\\n+      throw new Error(\\\"Cancelled\\\")\\n+    }\\n+  }\\n+  \\n+  private async fallbackCommitDialog(currentState: UIState): Promise<UIState> {\\n+    const readline = require('readline').createInterface({\\n+      input: process.stdin,\\n+      output: process.stdout\\n+    })\\n+    \\n+    const question = (prompt: string): Promise<string> => {\\n+      return new Promise((resolve) => {\\n+        readline.question(prompt, resolve)\\n+      })\\n+    }\\n+    \\n+    console.log(\\\"\\\\n⚠️ UNCOMMITTED CHANGES DETECTED\\\")\\n+    console.log(\\\"=\\\" .repeat(50))\\n+    console.log(\\\"Files with changes:\\\")\\n+    console.log(currentState.projectStatus.gitStatus.split('\\\\n').slice(0, 10).join('\\\\n'))\\n+    \\n+    console.log(\\\"\\\\nOptions:\\\")\\n+    console.log(\\\"1. 🤖 Interactive Commit UI\\\")\\n+    console.log(\\\"2. 📝 Quick auto-commit\\\")\\n+    console.log(\\\"3. ⏭️ Skip (proceed as-is)\\\")\\n+    console.log(\\\"4. ❌ Cancel\\\")\\n+    \\n+    const choice = await question(\\\"\\\\nSelect option (1-4): \\\")\\n+    readline.close()\\n+    \\n+    switch (choice) {\\n+      case \\\"1\\\":\\n+        console.log(\\\"🚀 Launching commit UI...\\\")\\n+        execSync('bun project-utils/commit-ui.ts', { stdio: 'inherit' })\\n+        const newStatus = this.getProjectStatus()\\n+        return { ...currentState, projectStatus: newStatus }\\n+        \\n+      case \\\"2\\\":\\n+        console.log(\\\"📝 Creating quick commit...\\\")\\n+        execSync('bun project-utils/commit-generator.ts --auto-approve --context \\\"Pre-release changes\\\"', { stdio: 'inherit' })\\n+        const refreshedStatus = this.getProjectStatus()\\n+        return { ...currentState, projectStatus: refreshedStatus }\\n+        \\n+      case \\\"3\\\":\\n+        console.log(\\\"⏭️ Proceeding with uncommitted changes...\\\")\\n+        return currentState\\n+        \\n+      default:\\n+        throw new Error(\\\"Cancelled\\\")\\n+    }\\n+  }\\n+}\\n+\\n+async function runTypeCheck(): Promise<void> {\\n+  console.log('🔍 Running type check...')\\n+  \\n+  try {\\n+    execSync('npm run type-check', { \\n+      stdio: ['pipe', 'pipe', 'pipe'],\\n+      encoding: 'utf-8'\\n+    })\\n+    console.log('✅ Type check passed')\\n+  } catch (error) {\\n+    console.log('❌ Type check failed:', error)\\n+    process.exit(1)\\n+  }\\n+}\\n+\\n+async function main() {\\n+  const ui = new AutoReleaseUIv2()\\n+  \\n+  // Check for quick mode with presets\\n+  const args = process.argv.slice(2)\\n+  \\n+  if (args.includes(\\\"--help\\\") || args.includes(\\\"-h\\\")) {\\n+    console.log(`\\n+🚀 Interactive Auto-Release UI v2.0\\n+\\n+Usage:\\n+  bun project-utils/auto-release-ui.ts [options]\\n+\\n+Quick Actions:\\n+  --hotfix           🚨 Critical patch + immediate publish\\n+  --feature          ✨ New feature + GitHub release  \\n+  --alpha            🧪 Testing release + GitHub packages\\n+  --major            💥 Breaking changes + full release\\n+  \\n+Options:\\n+  --help, -h         Show this help\\n+\\n+Features:\\n+  ✅ Smart commit detection & integration with commit-ui\\n+  ✅ Navigation with Back/Forward buttons  \\n+  ✅ Comprehensive project status display\\n+  ✅ Preview commands before execution\\n+  ✅ Quick actions for common release types\\n+  ✅ Robust error handling & cancellation\\n+  ✅ Cross-platform support (macOS/Linux/fallback)\\n+\\n+Examples:\\n+  bun project-utils/auto-release-ui.ts              # Interactive wizard\\n+  npm run release:ui                                # Via npm script\\n+  npm run release:hotfix                           # Quick hotfix\\n+  npm run release:alpha                            # Alpha release\\n+`)\\n+    process.exit(0)\\n+  }\\n+  \\n+  // Quick mode shortcuts\\n+  let quickOptions: ReleaseOptions | null = null\\n+  \\n+  if (args.includes(\\\"--hotfix\\\")) {\\n+    quickOptions = {\\n+      versionType: 'patch',\\n+      versionPrefix: 'stable',\\n+      buildMode: 'full',\\n+      workType: 'fix',\\n+      affectedComponents: ['core'],\\n+      context: 'Critical hotfix release',\\n+      performanceImpact: 'none',\\n+      createGitHubRelease: true,\\n+      publishNpm: true,\\n+      publishGitHub: false,\\n+      useAI: true,\\n+      dryRun: false,\\n+      autoApprove: true,\\n+      autoCommit: true,\\n+      force: false,\\n+      quiet: false,\\n+      selectedModules: [],\\n+      docsOnly: false,\\n+      skipTests: false,\\n+      skipTypeCheck: false,\\n+      keepLocalChanges: false\\n+    }\\n+  } else if (args.includes(\\\"--feature\\\")) {\\n+    quickOptions = {\\n+      versionType: 'minor',\\n+      versionPrefix: 'stable',\\n+      buildMode: 'full',\\n+      workType: 'feature',\\n+      affectedComponents: ['core'],\\n+      context: 'Feature release',\\n+      performanceImpact: 'none',\\n+      createGitHubRelease: true,\\n+      publishNpm: false,\\n+      publishGitHub: false,\\n+      useAI: true,\\n+      dryRun: false,\\n+      autoApprove: false,\\n+      autoCommit: false,\\n+      force: false,\\n+      quiet: false,\\n+      selectedModules: [],\\n+      docsOnly: false,\\n+      skipTests: false,\\n+      skipTypeCheck: false,\\n+      keepLocalChanges: false\\n+    }\\n+  } else if (args.includes(\\\"--alpha\\\")) {\\n+    quickOptions = {\\n+      versionType: 'minor',\\n+      versionPrefix: 'alpha',\\n+      buildMode: 'full',\\n+      workType: 'feature',\\n+      affectedComponents: ['core'],\\n+      context: 'Alpha testing release',\\n+      performanceImpact: 'none',\\n+      createGitHubRelease: true,\\n+      publishNpm: false,\\n+      publishGitHub: true,\\n+      useAI: true,\\n+      dryRun: false,\\n+      autoApprove: false,\\n+      autoCommit: false,\\n+      force: false,\\n+      quiet: false,\\n+      selectedModules: [],\\n+      docsOnly: false,\\n+      skipTests: false,\\n+      skipTypeCheck: false,\\n+      keepLocalChanges: false\\n+    }\\n+  } else if (args.includes(\\\"--major\\\")) {\\n+    quickOptions = {\\n+      versionType: 'major',\\n+      versionPrefix: 'stable',\\n+      buildMode: 'full',\\n+      workType: 'feature',\\n+      affectedComponents: ['core', 'styling', 'exports'],\\n+      context: 'Major version release',\\n+      performanceImpact: 'major',\\n+      createGitHubRelease: true,\\n+      publishNpm: true,\\n+      publishGitHub: false,\\n+      useAI: true,\\n+      dryRun: false,\\n+      autoApprove: false,\\n+      autoCommit: false,\\n+      force: false,\\n+      quiet: false,\\n+      selectedModules: [],\\n+      docsOnly: false,\\n+      skipTests: false,\\n+      skipTypeCheck: false,\\n+      keepLocalChanges: false\\n+    }\\n+  }\\n+  \\n+  try {\\n+    let options: ReleaseOptions\\n+    \\n+    if (quickOptions) {\\n+      console.log(\\\"🚀 Using quick mode preset\\\")\\n+      options = quickOptions\\n+    } else {\\n+      // Interactive mode with commit handling\\n+      console.log(\\\"🚀 Starting interactive release wizard...\\\")\\n+      \\n+      // First check and handle commits\\n+      let state = ui['navigation'].getCurrentState()\\n+      state = await ui['handleUncommittedChanges'](state)\\n+      \\n+      // Then collect release configuration  \\n+      options = await ui.collectReleaseInfo()\\n+    }\\n+    \\n+    // Execute release\\n+    await ui.executeRelease(options)\\n+    \\n+  } catch (error) {\\n+    if (error instanceof Error && error.message === \\\"Cancelled\\\") {\\n+      console.log(\\\"❌ Release cancelled by user\\\")\\n+      process.exit(0)\\n+    }\\n+    console.error(\\\"❌ Error:\\\", error)\\n+    process.exit(1)\\n+  }\\n+}\\n+\\n+if (import.meta.main) {\\n+  main()\\n+}\\n\\\\ No newline at end of file\",\n+      \"lines_added\": 1329,\n+      \"lines_removed\": 0,\n       \"is_binary\": false\n     },\n     {\n-      \"path\": \"packages/core/package.json\",\n+      \"path\": \"project-utils/commit-ui.ts\",\n       \"status\": \"modified\",\n-      \"diff\": \"diff --git a/packages/core/package.json b/packages/core/package.json\\nindex dbfe4fb..eb22893 100644\\n--- a/packages/core/package.json\\n+++ b/packages/core/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger-core\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"Core logging functionality for Better Logger - Advanced console logger with hierarchical levels\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\",\n+      \"diff\": \"diff --git a/project-utils/commit-ui.ts b/project-utils/commit-ui.ts\\nindex f430ad7..d0c76b6 100755\\n--- a/project-utils/commit-ui.ts\\n+++ b/project-utils/commit-ui.ts\\n@@ -200,7 +200,7 @@ class CommitUI {\\n     console.log(`📦 Components: ${options.affectedComponents.join(\\\", \\\")}`)\\n     console.log(`⚡ Performance: ${options.performanceImpact}`)\\n \\n-    const command = `node src/commit-generator.ts ${args.join(\\\" \\\")} --auto-approve`\\n+    const command = `bun project-utils/commit-generator.ts ${args.join(\\\" \\\")} --auto-approve`\\n     console.log(`\\\\n🚀 Running: ${command}`)\\n     \\n     try {\",\n       \"lines_added\": 1,\n       \"lines_removed\": 1,\n       \"is_binary\": false\n     },\n     {\n-      \"path\": \"packages/exports/package.json\",\n-      \"status\": \"modified\",\n-      \"diff\": \"diff --git a/packages/exports/package.json b/packages/exports/package.json\\nindex de76514..368f605 100644\\n--- a/packages/exports/package.json\\n+++ b/packages/exports/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger-exports\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"Export handlers for Better Logger - File, Remote, Analytics and custom log destinations\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\\n@@ -36,6 +36,6 @@\\n     \\\"README.md\\\"\\n   ],\\n   \\\"peerDependencies\\\": {\\n-    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.0-alpha.1\\\"\\n+    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.1-alpha.1\\\"\\n   }\\n }\",\n-      \"lines_added\": 2,\n-      \"lines_removed\": 2,\n-      \"is_binary\": false\n-    },\n-    {\n-      \"path\": \"packages/styling/package.json\",\n-      \"status\": \"modified\",\n-      \"diff\": \"diff --git a/packages/styling/package.json b/packages/styling/package.json\\nindex e70e550..bfe4e09 100644\\n--- a/packages/styling/package.json\\n+++ b/packages/styling/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger-styling\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"Advanced CSS styling system for Better Logger - Console styling with gradients, animations and SVG support\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\\n@@ -36,6 +36,6 @@\\n     \\\"README.md\\\"\\n   ],\\n   \\\"peerDependencies\\\": {\\n-    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.0-alpha.1\\\"\\n+    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.1-alpha.1\\\"\\n   }\\n }\",\n-      \"lines_added\": 2,\n-      \"lines_removed\": 2,\n+      \"path\": \"project-utils/project-config.ts\",\n+      \"status\": \"added\",\n+      \"diff\": \"diff --git a/project-utils/project-config.ts b/project-utils/project-config.ts\\nnew file mode 100644\\nindex 0000000..2cd4962\\n--- /dev/null\\n+++ b/project-utils/project-config.ts\\n@@ -0,0 +1,260 @@\\n+/**\\n+ * Configuración centralizada del proyecto Better Logger\\n+ * Define componentes, tipos de trabajo, y otras configuraciones compartidas\\n+ */\\n+\\n+export interface ProjectComponent {\\n+  id: string\\n+  name: string\\n+  description: string\\n+  buildCommand?: string\\n+  testCommand?: string\\n+}\\n+\\n+export interface WorkTypeConfig {\\n+  id: string\\n+  name: string\\n+  description: string\\n+  emoji: string\\n+}\\n+\\n+export const PROJECT_COMPONENTS: ProjectComponent[] = [\\n+  {\\n+    id: \\\"core\\\",\\n+    name: \\\"Core\\\",\\n+    description: \\\"Core logging functionality and Logger class\\\",\\n+    buildCommand: \\\"build:core\\\",\\n+    testCommand: \\\"test:core\\\"\\n+  },\\n+  {\\n+    id: \\\"styling\\\",\\n+    name: \\\"Styling\\\",\\n+    description: \\\"Visual features, themes, and CSS styling system\\\",\\n+    buildCommand: \\\"build:styling\\\",\\n+    testCommand: \\\"test:styling\\\"\\n+  },\\n+  {\\n+    id: \\\"exports\\\",\\n+    name: \\\"Exports\\\",\\n+    description: \\\"Export handlers and remote logging capabilities\\\",\\n+    buildCommand: \\\"build:exports\\\",\\n+    testCommand: \\\"test:exports\\\"\\n+  },\\n+  {\\n+    id: \\\"cli\\\",\\n+    name: \\\"CLI\\\",\\n+    description: \\\"Command-line interface and utilities\\\",\\n+    buildCommand: \\\"build:cli\\\",\\n+    testCommand: \\\"test:cli\\\"\\n+  },\\n+  {\\n+    id: \\\"docs\\\",\\n+    name: \\\"Documentation\\\",\\n+    description: \\\"Documentation, README files, and guides\\\"\\n+  },\\n+  {\\n+    id: \\\"tests\\\",\\n+    name: \\\"Tests\\\",\\n+    description: \\\"Test suites, fixtures, and testing utilities\\\"\\n+  },\\n+  {\\n+    id: \\\"examples\\\",\\n+    name: \\\"Examples\\\",\\n+    description: \\\"Usage examples and sample applications\\\"\\n+  },\\n+  {\\n+    id: \\\"workflows\\\",\\n+    name: \\\"Workflows\\\",\\n+    description: \\\"GitHub Actions workflows and CI/CD configuration\\\"\\n+  }\\n+]\\n+\\n+export const WORK_TYPES: WorkTypeConfig[] = [\\n+  {\\n+    id: \\\"feature\\\",\\n+    name: \\\"Feature\\\",\\n+    description: \\\"New functionality or capabilities\\\",\\n+    emoji: \\\"✨\\\"\\n+  },\\n+  {\\n+    id: \\\"fix\\\",\\n+    name: \\\"Fix\\\",\\n+    description: \\\"Bug fixes and issue resolution\\\",\\n+    emoji: \\\"🐛\\\"\\n+  },\\n+  {\\n+    id: \\\"refactor\\\",\\n+    name: \\\"Refactor\\\",\\n+    description: \\\"Code improvements without functional changes\\\",\\n+    emoji: \\\"♻️\\\"\\n+  },\\n+  {\\n+    id: \\\"docs\\\",\\n+    name: \\\"Documentation\\\",\\n+    description: \\\"Documentation updates and improvements\\\",\\n+    emoji: \\\"📝\\\"\\n+  },\\n+  {\\n+    id: \\\"test\\\",\\n+    name: \\\"Tests\\\",\\n+    description: \\\"Testing improvements and new test cases\\\",\\n+    emoji: \\\"🧪\\\"\\n+  },\\n+  {\\n+    id: \\\"chore\\\",\\n+    name: \\\"Chore\\\",\\n+    description: \\\"Maintenance tasks and dependency updates\\\",\\n+    emoji: \\\"🔧\\\"\\n+  },\\n+  {\\n+    id: \\\"perf\\\",\\n+    name: \\\"Performance\\\",\\n+    description: \\\"Performance improvements and optimizations\\\",\\n+    emoji: \\\"⚡\\\"\\n+  },\\n+  {\\n+    id: \\\"style\\\",\\n+    name: \\\"Style\\\",\\n+    description: \\\"Code style and formatting changes\\\",\\n+    emoji: \\\"💄\\\"\\n+  }\\n+]\\n+\\n+export const BUILD_MODES = [\\n+  {\\n+    id: \\\"full\\\",\\n+    name: \\\"Full Build\\\",\\n+    description: \\\"Complete bundle with all modules\\\",\\n+    modules: [\\\"core\\\", \\\"styling\\\", \\\"exports\\\", \\\"cli\\\"]\\n+  },\\n+  {\\n+    id: \\\"core\\\",\\n+    name: \\\"Core Only\\\",\\n+    description: \\\"Essential logging functionality (minimal size)\\\",\\n+    modules: [\\\"core\\\"]\\n+  },\\n+  {\\n+    id: \\\"styling\\\",\\n+    name: \\\"Styling Bundle\\\",\\n+    description: \\\"Core + visual features and theming\\\",\\n+    modules: [\\\"core\\\", \\\"styling\\\"]\\n+  },\\n+  {\\n+    id: \\\"exports\\\",\\n+    name: \\\"Exports Bundle\\\", \\n+    description: \\\"Core + export handlers and remote logging\\\",\\n+    modules: [\\\"core\\\", \\\"exports\\\"]\\n+  },\\n+  {\\n+    id: \\\"selective\\\",\\n+    name: \\\"Selective\\\",\\n+    description: \\\"Choose specific modules to include\\\",\\n+    modules: [] // User selects\\n+  },\\n+  {\\n+    id: \\\"skip\\\",\\n+    name: \\\"Skip Build\\\",\\n+    description: \\\"Use existing build artifacts\\\",\\n+    modules: []\\n+  }\\n+]\\n+\\n+export const VERSION_PREFIXES = [\\n+  {\\n+    id: \\\"stable\\\",\\n+    name: \\\"Stable\\\",\\n+    description: \\\"Production-ready release\\\",\\n+    npmTag: \\\"latest\\\"\\n+  },\\n+  {\\n+    id: \\\"alpha\\\",\\n+    name: \\\"Alpha\\\",\\n+    description: \\\"Early testing and development\\\",\\n+    npmTag: \\\"alpha\\\"\\n+  },\\n+  {\\n+    id: \\\"beta\\\", \\n+    name: \\\"Beta\\\",\\n+    description: \\\"Feature-complete testing phase\\\",\\n+    npmTag: \\\"beta\\\"\\n+  },\\n+  {\\n+    id: \\\"rc\\\",\\n+    name: \\\"Release Candidate\\\",\\n+    description: \\\"Final testing before stable release\\\",\\n+    npmTag: \\\"next\\\"\\n+  },\\n+  {\\n+    id: \\\"pre-alpha\\\",\\n+    name: \\\"Pre-Alpha\\\",\\n+    description: \\\"Experimental and unstable features\\\",\\n+    npmTag: \\\"experimental\\\"\\n+  }\\n+]\\n+\\n+export const PERFORMANCE_IMPACTS = [\\n+  {\\n+    id: \\\"none\\\",\\n+    name: \\\"None\\\",\\n+    description: \\\"No performance impact expected\\\"\\n+  },\\n+  {\\n+    id: \\\"minor\\\",\\n+    name: \\\"Minor\\\",\\n+    description: \\\"Small performance improvements or negligible impact\\\"\\n+  },\\n+  {\\n+    id: \\\"major\\\",\\n+    name: \\\"Major\\\",\\n+    description: \\\"Significant performance changes or optimizations\\\"\\n+  }\\n+]\\n+\\n+// Helper functions\\n+export function getComponentById(id: string): ProjectComponent | undefined {\\n+  return PROJECT_COMPONENTS.find(c => c.id === id)\\n+}\\n+\\n+export function getWorkTypeById(id: string): WorkTypeConfig | undefined {\\n+  return WORK_TYPES.find(w => w.id === id)\\n+}\\n+\\n+export function getComponentIds(): string[] {\\n+  return PROJECT_COMPONENTS.map(c => c.id)\\n+}\\n+\\n+export function getWorkTypeIds(): string[] {\\n+  return WORK_TYPES.map(w => w.id)\\n+}\\n+\\n+export function getBuildModeById(id: string) {\\n+  return BUILD_MODES.find(b => b.id === id)\\n+}\\n+\\n+export function getVersionPrefixById(id: string) {\\n+  return VERSION_PREFIXES.find(v => v.id === id)\\n+}\\n+\\n+export function formatComponentsList(componentIds: string[]): string {\\n+  const components = componentIds\\n+    .map(id => getComponentById(id))\\n+    .filter(Boolean)\\n+    .map(c => c!.name)\\n+  \\n+  if (components.length === 0) return \\\"none\\\"\\n+  if (components.length === 1) return components[0]\\n+  if (components.length === 2) return components.join(\\\" and \\\")\\n+  \\n+  return components.slice(0, -1).join(\\\", \\\") + \\\", and \\\" + components[components.length - 1]\\n+}\\n+\\n+// Project metadata\\n+export const PROJECT_INFO = {\\n+  name: \\\"@mks2508/better-logger\\\",\\n+  displayName: \\\"Better Logger\\\",\\n+  description: \\\"State-of-the-art console logger with advanced CSS styling, SVG support, animations, and CLI interface\\\",\\n+  author: \\\"MKS2508\\\",\\n+  license: \\\"MIT\\\",\\n+  homepage: \\\"https://mks2508.github.io/advanced-logger/\\\",\\n+  repository: \\\"https://github.com/MKS2508/advanced-logger.git\\\"\\n+}\\n\\\\ No newline at end of file\",\n+      \"lines_added\": 260,\n+      \"lines_removed\": 0,\n       \"is_binary\": false\n     }\n   ],\n   \"stats\": {\n-    \"total_files\": 5,\n-    \"total_additions\": 24,\n-    \"total_deletions\": 7,\n+    \"total_files\": 4,\n+    \"total_additions\": 48,\n+    \"total_deletions\": 1,\n     \"files_by_extension\": {\n-      \"json\": 5\n+      \"json\": 1,\n+      \"ts\": 3\n     },\n     \"directories_affected\": [\n-      \"CHANGELOG.json\",\n       \"package.json\",\n-      \"packages\"\n+      \"project-utils\"\n     ]\n   },\n   \"project_context\": {",
      "lines_added": 22,
      "lines_removed": 30,
      "is_binary": false
    },
    {
      "path": "project-utils/.temp/gemini-prompt.txt",
      "status": "modified",
      "diff": "diff --git a/project-utils/.temp/gemini-prompt.txt b/project-utils/.temp/gemini-prompt.txt\nindex c100161..8a2a8c3 100644\n--- a/project-utils/.temp/gemini-prompt.txt\n+++ b/project-utils/.temp/gemini-prompt.txt\n@@ -25,99 +25,61 @@ Eres un asistente especializado en análisis de código y automatización para e\n ## Datos del Análisis\n {\n   \"stats\": {\n-    \"total_files\": 5,\n-    \"total_additions\": 24,\n-    \"total_deletions\": 7,\n+    \"total_files\": 4,\n+    \"total_additions\": 48,\n+    \"total_deletions\": 1,\n     \"files_by_extension\": {\n-      \"json\": 5\n+      \"json\": 1,\n+      \"ts\": 3\n     },\n     \"directories_affected\": [\n-      \"CHANGELOG.json\",\n       \"package.json\",\n-      \"packages\"\n+      \"project-utils\"\n     ]\n   },\n   \"files\": [\n     {\n-      \"path\": \"CHANGELOG.json\",\n+      \"path\": \"package.json\",\n       \"status\": \"modified\",\n-      \"lines_added\": 18,\n-      \"lines_removed\": 1,\n+      \"lines_added\": 5,\n+      \"lines_removed\": 0,\n       \"is_binary\": false,\n-      \"diff_preview\": \"diff --git a/CHANGELOG.json b/CHANGELOG.json\\nindex 26db34b..09b3006 100644\\n--- a/CHANGELOG.json\\n+++ b/CHANGELOG.json\\n@@ -1,6 +1,23 @@\\n {\\n-  \\\"current_version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"current_version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"versions\\\": [\\n+    {\\n+      \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n+      \\\"date\\\": \\\"2025-08-29\\\",\\n+      \\\"type\\\": \\\"patch\\\",\\n+      \\\"title\\\": \\\"Versión Alpha - Nueva funcionalidad: feat(core): mejoras y actualizaciones automáticas\\\",\\n+      \\\"changes\\\": [\\n+        {\\n+          \\\"type\\\": \\\"feature\\\",\\n+          \\\"title\\\": \\\"feat(core): mejoras y actualizaciones automáticas\\\",\\n+          \\\"description\\\": \\\"feat(core): mejoras y actualizaciones automáticas\\\"\\n+        }\\n+      ],\\n+      \\\"technical_notes\\\": \\\"\\\",\\n+      \\\"breaking_changes\\\": [],\\n+      \\\"commit_hash\\\": \\\"0e5c697086454b1a56cee3696d08e38515449217\\\",\\n+      \\\"prefix\\\": \\\"alpha\\\"\\n+    },\\n     {\\n       \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n       \\\"date\\\": \\\"2025-08-29\\\",\"\n+      \"diff_preview\": \"diff --git a/package.json b/package.json\\nindex d55f58e..ab09913 100644\\n--- a/package.json\\n+++ b/package.json\\n@@ -62,6 +62,11 @@\\n     \\\"release:github\\\": \\\"bun project-utils/github-release-manager.ts --auto-approve\\\",\\n     \\\"release:full\\\": \\\"npm run version:auto && npm run build:all && npm run release:github && npm run ci:publish\\\",\\n     \\\"release:auto\\\": \\\"bun project-utils/auto-release-gemini.ts --ai --auto-approve\\\",\\n+    \\\"release:ui\\\": \\\"bun project-utils/auto-release-ui.ts\\\",\\n+    \\\"release:hotfix\\\": \\\"bun project-utils/auto-release-ui.ts --hotfix\\\",\\n+    \\\"release:feature\\\": \\\"bun project-utils/auto-release-ui.ts --feature\\\",\\n+    \\\"release:alpha\\\": \\\"bun project-utils/auto-release-ui.ts --alpha\\\",\\n+    \\\"release:major\\\": \\\"bun project-utils/auto-release-ui.ts --major\\\",\\n     \\\"publish:core\\\": \\\"cd packages/core && npm publish --access public\\\",\\n     \\\"publish:styling\\\": \\\"cd packages/styling && npm publish --access public\\\",\\n     \\\"publish:exports\\\": \\\"cd packages/exports && npm publish --access public\\\",\"\n     },\n     {\n-      \"path\": \"package.json\",\n-      \"status\": \"modified\",\n-      \"lines_added\": 1,\n-      \"lines_removed\": 1,\n+      \"path\": \"project-utils/auto-release-ui.ts\",\n+      \"status\": \"added\",\n+      \"lines_added\": 1329,\n+      \"lines_removed\": 0,\n       \"is_binary\": false,\n-      \"diff_preview\": \"diff --git a/package.json b/package.json\\nindex 8701d95..eaafac6 100644\\n--- a/package.json\\n+++ b/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"State-of-the-art console logger with advanced CSS styling, SVG support, animations, and CLI interface\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\"\n+      \"diff_preview\": \"diff --git a/project-utils/auto-release-ui.ts b/project-utils/auto-release-ui.ts\\nnew file mode 100644\\nindex 0000000..ec9d754\\n--- /dev/null\\n+++ b/project-utils/auto-release-ui.ts\\n@@ -0,0 +1,1329 @@\\n+#!/usr/bin/env node\\n+\\n+import { execSync } from \\\"child_process\\\"\\n+import { platform } from \\\"os\\\"\\n+import { readFileSync, existsSync, writeFileSync, mkdirSync } from \\\"fs\\\"\\n+import { join } from \\\"path\\\"\\n+import { \\n+  PROJECT_COMPONENTS, \\n+  WORK_TYPES, \\n+  BUILD_MODES, \\n+  VERSION_PREFIXES,\\n+  PERFORMANCE_IMPACTS,\\n+  getComponentIds,\\n+  getWorkTypeIds,\\n+  formatComponentsList,\\n+  PROJECT_INFO\\n+} from './project-config'\\n+\\n+interface ReleaseOptions {\\n+  // General Configuration\\n+  useAI: boolean\\n+  dryRun: boolean\\n+  autoApprove: boolean\\n+  autoCommit: boolean\\n+  force: boolean\\n+  quiet: boolean\\n+  \\n+  // Version Management\\n+  versionType: 'major' | 'minor' | 'patch' | 'auto'\\n+  versionPrefix: 'alpha' | 'beta' | 'rc' | 'stable' | 'pre-alpha'\\n+  \\n+  // Build Configuration\\n+  buildMode: 'full' | 'core' | 'styling' | 'exports' | 'selective' | 'skip'\\n+  selectedModules: string[]\\n+  docsOnly: boolean\\n+  \\n+  // Commit Configuration  \\n+  workType: 'feature' | 'fix' | 'refactor' | 'docs' | 'test'\\n+  affectedComponents: string[]\\n+  context: string\\n+  performanceImpact: 'none' | 'minor' | 'major'\\n+  \\n+  // Extended Context (from auto-release-gemini.ts)\\n+  focusArea?: string\\n+  targetPlatform?: string\\n+  urgency?: string\\n+  targetAudience?: string\\n+  dependencies?: string\\n+  \\n+  // Publishing\\n+  crea\"\n     },\n     {\n-      \"path\": \"packages/core/package.json\",\n+      \"path\": \"project-utils/commit-ui.ts\",\n       \"status\": \"modified\",\n       \"lines_added\": 1,\n       \"lines_removed\": 1,\n       \"is_binary\": false,\n-      \"diff_preview\": \"diff --git a/packages/core/package.json b/packages/core/package.json\\nindex dbfe4fb..eb22893 100644\\n--- a/packages/core/package.json\\n+++ b/packages/core/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger-core\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"Core logging functionality for Better Logger - Advanced console logger with hierarchical levels\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\"\n-    },\n-    {\n-      \"path\": \"packages/exports/package.json\",\n-      \"status\": \"modified\",\n-      \"lines_added\": 2,\n-      \"lines_removed\": 2,\n-      \"is_binary\": false,\n-      \"diff_preview\": \"diff --git a/packages/exports/package.json b/packages/exports/package.json\\nindex de76514..368f605 100644\\n--- a/packages/exports/package.json\\n+++ b/packages/exports/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger-exports\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"Export handlers for Better Logger - File, Remote, Analytics and custom log destinations\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\\n@@ -36,6 +36,6 @@\\n     \\\"README.md\\\"\\n   ],\\n   \\\"peerDependencies\\\": {\\n-    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.0-alpha.1\\\"\\n+    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.1-alpha.1\\\"\\n   }\\n }\"\n+      \"diff_preview\": \"diff --git a/project-utils/commit-ui.ts b/project-utils/commit-ui.ts\\nindex f430ad7..d0c76b6 100755\\n--- a/project-utils/commit-ui.ts\\n+++ b/project-utils/commit-ui.ts\\n@@ -200,7 +200,7 @@ class CommitUI {\\n     console.log(`📦 Components: ${options.affectedComponents.join(\\\", \\\")}`)\\n     console.log(`⚡ Performance: ${options.performanceImpact}`)\\n \\n-    const command = `node src/commit-generator.ts ${args.join(\\\" \\\")} --auto-approve`\\n+    const command = `bun project-utils/commit-generator.ts ${args.join(\\\" \\\")} --auto-approve`\\n     console.log(`\\\\n🚀 Running: ${command}`)\\n     \\n     try {\"\n     },\n     {\n-      \"path\": \"packages/styling/package.json\",\n-      \"status\": \"modified\",\n-      \"lines_added\": 2,\n-      \"lines_removed\": 2,\n+      \"path\": \"project-utils/project-config.ts\",\n+      \"status\": \"added\",\n+      \"lines_added\": 260,\n+      \"lines_removed\": 0,\n       \"is_binary\": false,\n-      \"diff_preview\": \"diff --git a/packages/styling/package.json b/packages/styling/package.json\\nindex e70e550..bfe4e09 100644\\n--- a/packages/styling/package.json\\n+++ b/packages/styling/package.json\\n@@ -1,6 +1,6 @@\\n {\\n   \\\"name\\\": \\\"@mks2508/better-logger-styling\\\",\\n-  \\\"version\\\": \\\"0.7.0-alpha.1\\\",\\n+  \\\"version\\\": \\\"0.7.1-alpha.1\\\",\\n   \\\"type\\\": \\\"module\\\",\\n   \\\"description\\\": \\\"Advanced CSS styling system for Better Logger - Console styling with gradients, animations and SVG support\\\",\\n   \\\"main\\\": \\\"dist/index.js\\\",\\n@@ -36,6 +36,6 @@\\n     \\\"README.md\\\"\\n   ],\\n   \\\"peerDependencies\\\": {\\n-    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.0-alpha.1\\\"\\n+    \\\"@mks2508/better-logger-core\\\": \\\"^0.7.1-alpha.1\\\"\\n   }\\n }\"\n+      \"diff_preview\": \"diff --git a/project-utils/project-config.ts b/project-utils/project-config.ts\\nnew file mode 100644\\nindex 0000000..2cd4962\\n--- /dev/null\\n+++ b/project-utils/project-config.ts\\n@@ -0,0 +1,260 @@\\n+/**\\n+ * Configuración centralizada del proyecto Better Logger\\n+ * Define componentes, tipos de trabajo, y otras configuraciones compartidas\\n+ */\\n+\\n+export interface ProjectComponent {\\n+  id: string\\n+  name: string\\n+  description: string\\n+  buildCommand?: string\\n+  testCommand?: string\\n+}\\n+\\n+export interface WorkTypeConfig {\\n+  id: string\\n+  name: string\\n+  description: string\\n+  emoji: string\\n+}\\n+\\n+export const PROJECT_COMPONENTS: ProjectComponent[] = [\\n+  {\\n+    id: \\\"core\\\",\\n+    name: \\\"Core\\\",\\n+    description: \\\"Core logging functionality and Logger class\\\",\\n+    buildCommand: \\\"build:core\\\",\\n+    testCommand: \\\"test:core\\\"\\n+  },\\n+  {\\n+    id: \\\"styling\\\",\\n+    name: \\\"Styling\\\",\\n+    description: \\\"Visual features, themes, and CSS styling system\\\",\\n+    buildCommand: \\\"build:styling\\\",\\n+    testCommand: \\\"test:styling\\\"\\n+  },\\n+  {\\n+    id: \\\"exports\\\",\\n+    name: \\\"Exports\\\",\\n+    description: \\\"Export handlers and remote logging capabilities\\\",\\n+    buildCommand: \\\"build:exports\\\",\\n+    testCommand: \\\"test:exports\\\"\\n+  },\\n+  {\\n+    id: \\\"cli\\\",\\n+    name: \\\"CLI\\\",\\n+    description: \\\"Command-line interface and utilities\\\",\\n+    buildCommand: \\\"build:cli\\\",\\n+    testCommand: \\\"test:cli\\\"\\n+  },\\n+  {\\n+    id: \\\"docs\\\",\\n+    name: \\\"Documentation\\\",\\n+    description: \\\"Documentation, README files, and guides\\\"\\n+  },\\n+  {\\n+    i\"\n     }\n   ],\n   \"patterns\": \"No commit patterns found\"\n }\n \n ## Contexto Adicional\n-AUTO-RELEASE CONTEXT - Version 0.7.1-alpha.1\n-\n-Esto es un auto-release generado automáticamente para la versión 0.7.1-alpha.1.\n-Se han compilado y añadido binarios ARM64 optimizados para Raspberry Pi 3B+.\n-\n-ARCHIVOS INCLUIDOS:\n-- Binario ejecutable nativo ARM64\n-- Paquete Debian (.deb) para fácil instalación\n-- Paquete RPM (.rpm) para distribuciones basadas en RPM\n-- README detallado generado con AI\n-- Documentación adicional generada por AI\n-\n-CARACTERÍSTICAS DE ESTA VERSIÓN:\n-- feature: feat(core): mejoras y actualizaciones automáticas\n-\n-NOTAS TÉCNICAS:\n-- Compilado nativamente en ARM64 con optimizaciones específicas\n-- OpenSSL configurado para cross-compilation\n-- Todos los tests pasaron exitosamente\n-- Documentación mejorada con inteligencia artificial\n-\n-Por favor genera un commit tipo 'release(0.7.1-alpha.1)' que refleje adecuadamente:\n-1. Que es un auto-release automatizado\n-2. Las características principales de esta versión\n-3. Que incluye binarios optimizados para RPi\n-4. Que usa AI para documentación mejorada\n-\n-Mantén el mensaje profesional pero informativo.\n-\n ## Contexto Estructurado\n \n-**Descripción del trabajo**: arreglar formato de versiones para compatibilidad NPM semver\n-**Tipo de trabajo**: fix - fix\n-**Componentes afectados**: version-manager\n-**Impacto en rendimiento**: none - none\n+**Descripción del trabajo**: mejoras tools deploy\n+**Tipo de trabajo**: feature - Nueva funcionalidad o capacidad\n+**Componentes afectados**: core\n \n ---",
      "lines_added": 25,
      "lines_removed": 53,
      "is_binary": false
    },
    {
      "path": "project-utils/.temp/gemini-response.md",
      "status": "modified",
      "diff": "diff --git a/project-utils/.temp/gemini-response.md b/project-utils/.temp/gemini-response.md\nindex d15b161..57cb3af 100644\n--- a/project-utils/.temp/gemini-response.md\n+++ b/project-utils/.temp/gemini-response.md\n@@ -1,31 +1,31 @@\n ### **ANÁLISIS PRINCIPAL**\n \n-Los cambios detectados consisten en la actualización de la versión a `0.7.1-alpha.1` en los archivos `package.json` del proyecto principal y de los sub-paquetes (`core`, `exports`, `styling`). Además, se ha actualizado el `CHANGELOG.json` para reflejar la nueva versión y sus características, incluyendo la funcionalidad `feat(core): mejoras y actualizaciones automáticas`.\n+Se ha introducido un nuevo y avanzado sistema de gestión de releases (`auto-release-ui.ts`) que permite la creación de versiones de forma interactiva y mediante comandos específicos. Para dar soporte a esta nueva herramienta, se ha realizado una refactorización clave, centralizando toda la configuración del proyecto (componentes, tipos de trabajo, etc.) en un único archivo (`project-config.ts`), mejorando la mantenibilidad y consistencia de las herramientas internas. Adicionalmente, se han añadido los scripts correspondientes en `package.json` y se ha corregido una ruta de ejecución en la herramienta de commits.\n \n ---\n \n ### **Propuesta de Commit #1**\n \n ```markdown\n-release(0.7.1-alpha.1): Publicación automatizada de la versión 0.7.1-alpha.1\n+feat(tooling): introduce sistema de release interactivo y centraliza configuración\n \n-Este es un commit de publicación automatizado para la versión 0.7.1-alpha.1.\n+Se implementa un nuevo sistema de gestión de releases basado en una interfaz de línea de comandos (CLI) interactiva, facilitando la creación de versiones `major`, `feature`, `hotfix`, `alpha`, etc. Este sistema mejora significativamente el flujo de trabajo de despliegue, haciéndolo más rápido, intuitivo y menos propenso a errores.\n \n-Esta versión introduce la nueva característica de mejoras y actualizaciones automáticas en el núcleo de la aplicación. Incluye binarios ARM64 nativos, optimizados específicamente para Raspberry Pi 3B+, y viene acompañada de documentación mejorada y notas de lanzamiento generadas mediante inteligencia artificial para mayor claridad y detalle.\n+Como parte de esta mejora, se ha refactorizado la configuración de las herramientas del proyecto, centralizándola en el nuevo archivo `project-config.ts`. Esto elimina la duplicación de código y asegura que todas las utilidades (commit, release, etc.) compartan una única fuente de verdad para la configuración de componentes, tipos de trabajo y modos de construcción.\n \n <technical>\n-- Actualización de la versión a `0.7.1-alpha.1` en `package.json`, `packages/core/package.json`, `packages/exports/package.json` y `packages/styling/package.json`.\n-- Actualización de `CHANGELOG.json` para registrar la nueva versión y sus cambios.\n-- Inclusión de binarios ARM64 pre-compilados y optimizados para Raspberry Pi 3B+.\n-- Generación de documentación y notas de release asistida por IA.\n+- **Añadido `project-utils/auto-release-ui.ts`**: Nuevo script para la gestión interactiva de releases.\n+- **Añadido `project-utils/project-config.ts`**: Módulo de configuración centralizado para componentes, tipos de trabajo y constantes del proyecto.\n+- **Modificado `package.json`**: Se agregaron nuevos scripts `release:ui`, `release:hotfix`, `release:feature`, `release:alpha` y `release:major` para invocar el nuevo sistema.\n+- **Modificado `project-utils/commit-ui.ts`**: Se corrigió el comando de ejecución para usar `bun` y la ruta correcta del script, estandarizando el uso de herramientas.\n </technical>\n \n <changelog>\n-## [feature] ✨\n-feat(core): Mejoras y actualizaciones automáticas para una experiencia de usuario más fluida y mantenible.\n+## [New] 🚀\n+Se ha implementado un nuevo sistema de release interactivo para agilizar y estandarizar la creación de nuevas versiones del proyecto.\n </changelog>\n ```\n \n ---\n \n-**DECISIÓN**: Se propone un único commit, ya que todos los cambios están directamente relacionados con el proceso de lanzamiento automatizado de la nueva versión `0.7.1-alpha.1` y forman una unidad lógica.\n+**DECISIÓN**: Se propone un único commit, ya que todos los cambios están directamente relacionados y forman parte de una única funcionalidad cohesiva: la implementación del nuevo sistema de release y la refactorización de la configuración necesaria para su funcionamiento. Separarlos resultaría en estados intermedios inconsistentes en el repositorio.",
      "lines_added": 11,
      "lines_removed": 7,
      "is_binary": false
    }
  ],
  "stats": {
    "total_files": 3,
    "total_additions": 21,
    "total_deletions": 36,
    "files_by_extension": {
      "json": 1,
      "txt": 1,
      "md": 1
    },
    "directories_affected": [
      "project-utils"
    ]
  },
  "project_context": {
    "name": "OpenTUI",
    "description": "Modern Terminal User Interface Framework",
    "tech_stack": [
      "TypeScript",
      "Node.js",
      "Terminal UI",
      "CLI"
    ],
    "target_platform": "Cross-platform (macOS, Linux, Windows)"
  },
  "commit_patterns": "No commit patterns found"
}