# Sistema de Análisis Inteligente - Better Logger

Eres un asistente especializado en análisis de código y automatización para el proyecto Better Logger. Tu función es proporcionar respuestas estructuradas, precisas y consistentes que puedan ser parseadas automáticamente.

## REGLAS CRÍTICAS DE FORMATO

1. **FORMATO DE RESPUESTA OBLIGATORIO**: Todas tus respuestas deben seguir exactamente el formato especificado más abajo.
2. **CONSISTENCIA**: Mantén la misma estructura sin importar la complejidad del análisis.
3. **PARSEABLE**: El formato debe ser fácil de procesar automáticamente con expresiones regulares.
4. **BLOQUES MARKDOWN**: Usa ```markdown para bloques de código cuando se especifique.
5. **SECCIONES TÉCNICAS**: Siempre incluye las secciones <technical> y <changelog> cuando sea aplicable.

## Contexto del Proyecto
**Nombre**: Better Logger
**Descripción**: State-of-the-art console logger with advanced CSS styling, SVG support, animations, and CLI interface
**Versión Actual**: 0.0.3-alpha.0
**Stack Tecnológico**: TypeScript, Vite, Browser, CSS-in-JS, SVG
**Plataforma Objetivo**: Browser (Chrome, Firefox, Safari, Edge)

---


# ANÁLISIS DE COMMITS

## Datos del Análisis
{
  "stats": {
    "total_files": 5,
    "total_additions": 31,
    "total_deletions": 40,
    "files_by_extension": {
      "json": 1,
      "md": 2,
      "txt": 1,
      "ts": 1
    },
    "directories_affected": [
      "project-utils",
      "..."
    ]
  },
  "files": [
    {
      "path": "project-utils/.temp/analysis-context.json",
      "status": "modified",
      "lines_added": 0,
      "lines_removed": 0,
      "is_binary": false,
      "diff_preview": "New file: project-utils/.temp/analysis-context.json"
    },
    {
      "path": "project-utils/.temp/commit-proposal-2025-08-29T19-13-29.md",
      "status": "added",
      "lines_added": 52,
      "lines_removed": 0,
      "is_binary": false,
      "diff_preview": "diff --git a/project-utils/.temp/commit-proposal-2025-08-29T19-13-29.md b/project-utils/.temp/commit-proposal-2025-08-29T19-13-29.md\nnew file mode 100644\nindex 0000000..a3fdec9\n--- /dev/null\n+++ b/project-utils/.temp/commit-proposal-2025-08-29T19-13-29.md\n@@ -0,0 +1,52 @@\n+### **ANÁLISIS PRINCIPAL**\n+\n+Se ha realizado una migración completa de la infraestructura de CI/CD de NPM a Bun para mejorar el rendimiento. Paralelamente, se ha refactorizado la arquitectura del proyecto a un monorepo, dividiendo la librería en tres paquetes modulares e independientes: `core`, `styling` y `exports`. Las herramientas de build y automatización han sido actualizadas para soportar esta nueva estructura.\n+\n+---\n+\n+### **Propuesta de Commit #1**\n+\n+```markdown\n+chore(ci): migrar la infraestructura de CI/CD de NPM a Bun\n+\n+Se reemplaza `npm` con `bun` en todos los flujos de trabajo de GitHub Actions para estandarizar las herramientas y acelerar los tiempos de ejecución. Esto afecta la instalación de dependencias, la ejecución de scripts y la configuración del entorno de pruebas.\n+\n+<technical>\n+- **Workflows de GitHub Actions**: Modificados `ci-quality.yml`, `docs-demo.yml`, `nightly-auto.yml`, `releases-core.yml` y `releases-full.yml`.\n+- **Setup**: Reemplazado `actions/setup-node` por `oven-sh/setup-bun`.\n+- **Instalación**: Cambiado `npm run ci:install` por `bun install --frozen-lockfile`.\n+- **Ejecución de Scripts**: Actualizados todos los comandos `npm run` a `bun run`.\n+- **Matriz de Prueb"
    },
    {
      "path": "project-utils/.temp/gemini-prompt.txt",
      "status": "modified",
      "lines_added": 19,
      "lines_removed": 155,
      "is_binary": false,
      "diff_preview": "diff --git a/project-utils/.temp/gemini-prompt.txt b/project-utils/.temp/gemini-prompt.txt\nindex 8fefda8..1eb3236 100644\n--- a/project-utils/.temp/gemini-prompt.txt\n+++ b/project-utils/.temp/gemini-prompt.txt\n@@ -25,187 +25,51 @@ Eres un asistente especializado en análisis de código y automatización para e\n ## Datos del Análisis\n {\n   \"stats\": {\n-    \"total_files\": 20,\n-    \"total_additions\": 61,\n-    \"total_deletions\": 15,\n+    \"total_files\": 4,\n+    \"total_additions\": 28,\n+    \"total_deletions\": 26,\n     \"files_by_extension\": {\n-      \"yml\": 5,\n-      \"md\": 3,\n-      \"json\": 6,\n-      \"txt\": 1,\n-      \"ts\": 5\n+      \"json\": 1,\n+      \"md\": 2,\n+      \"txt\": 1\n     },\n     \"directories_affected\": [\n-      \".github\",\n-      \".release-notes-0.2.0.md\",\n-      \"CHANGELOG.json\",\n-      \"package.json\",\n-      \"packages\",\n       \"project-utils\",\n-      \"...\",\n-      \"vite.config.ts\"\n+      \"...\"\n     ]\n   },\n   \"files\": [\n-    {\n-      \"path\": \".github/workflows/ci-quality.yml\",\n-      \"status\": \"modified\",\n-      \"lines_added\": 19,\n-      \"lines_removed\": 20,\n-      \"is_binary\": false,\n-      \"diff_preview\": \"diff --git a/.github/workflows/ci-quality.yml b/.github/workflows/ci-quality.yml\\nindex 5974ff0..b59e9cc 100644\\n--- a/.github/workflows/ci-quality.yml\\n+++ b/.github/workflows/ci-quality.yml\\n@@ -29,10 +29,10 @@ jobs:\\n     strategy:\\n       fail-fast: false\\n       matrix:\\n-        node-version: [18, 20, 21]\\n+        bun-version: [\\\"1.0\\\", \\\"latest\\\"]\\n         build-mode:"
    },
    {
      "path": "project-utils/.temp/gemini-response.md",
      "status": "modified",
      "lines_added": 13,
      "lines_removed": 8,
      "is_binary": false,
      "diff_preview": "diff --git a/project-utils/.temp/gemini-response.md b/project-utils/.temp/gemini-response.md\nindex 9349f0a..a3fdec9 100644\n--- a/project-utils/.temp/gemini-response.md\n+++ b/project-utils/.temp/gemini-response.md\n@@ -16,38 +16,37 @@ Se reemplaza `npm` con `bun` en todos los flujos de trabajo de GitHub Actions pa\n - **Setup**: Reemplazado `actions/setup-node` por `oven-sh/setup-bun`.\n - **Instalación**: Cambiado `npm run ci:install` por `bun install --frozen-lockfile`.\n - **Ejecución de Scripts**: Actualizados todos los comandos `npm run` a `bun run`.\n-- **Matriz de Pruebas**: La matriz en `ci-quality.yml` ahora prueba contra versiones de `bun` en lugar de `node`.\n+- **Matriz de Pruebas**: Estandarizada para usar `bun` en todas las versiones de Node.\n </technical>\n \n <changelog>\n-## [Improvement] [🚀]\n-Infraestructura de CI/CD migrada a Bun para mayor rendimiento y eficiencia.\n+## [Infraestructura] ⚙️\n+- Optimización de la infraestructura de CI/CD para mejorar el rendimiento y la velocidad de los builds.\n </changelog>\n ```\n \n ### **Propuesta de Commit #2**\n \n ```markdown\n-feat(build): implementar arquitectura de monorepo modular\n+refactor(arquitectura): refactorizar a monorepo y modularizar paquetes\n \n-Se refactoriza el proyecto a una arquitectura de monorepo para mejorar la modularidad y mantenibilidad. Se crean tres paquetes publicables e independientes: `@mks2508/better-logger-core`, `@mks2508/better-logger-styling` y `@mks2508/better-logger-exports`.\n+Se reestructura el pr"
    },
    {
      "path": "project-utils/commit-generator.ts",
      "status": "modified",
      "lines_added": 150,
      "lines_removed": 12,
      "is_binary": false,
      "diff_preview": "diff --git a/project-utils/commit-generator.ts b/project-utils/commit-generator.ts\nindex 510e1d4..f9dfb9a 100755\n--- a/project-utils/commit-generator.ts\n+++ b/project-utils/commit-generator.ts\n@@ -461,20 +461,124 @@ class CommitGenerator {\n   /**\n    * Parsea propuestas de commit de la respuesta de Gemini\n    */\n-  private parseCommitProposals(aiResponse: string): CommitProposal[] {\n+  private parseCommitProposals(aiResponse: string, allFiles: FileChange[]): CommitProposal[] {\n     // Usar el parser estandarizado\n     const parsedProposals = GeminiResponseParser.parseCommitProposals(aiResponse);\n     \n-    // Convertir al formato interno\n+    // Si hay múltiples commits, dividir archivos inteligentemente\n+    if (parsedProposals.length > 1) {\n+      return this.distributeFilesAcrossCommits(parsedProposals, allFiles);\n+    }\n+    \n+    // Commit único usa todos los archivos\n     return parsedProposals.map(proposal => ({\n       title: proposal.title,\n       description: proposal.description,\n       technical: proposal.technical,\n       changelog: proposal.changelog,\n-      files: [] // Usar todos los archivos disponibles\n+      files: allFiles.map(f => f.path).filter(path => \n+        !path.includes('.temp/') && \n+        !path.startsWith('.release-notes-') &&\n+        !path.includes(' -> ')\n+      )\n     }));\n   }\n \n+  /**\n+   * Distribuye archivos entre múltiples commits basado en patrones\n+   */\n+  private distributeFilesAcrossCommits(\n+    parsedProposals: any[], \n+    allF"
    }
  ],
  "patterns": "No commit patterns found"
}

## Contexto Adicional
Ninguno proporcionado

---

## FORMATO DE RESPUESTA REQUERIDO

Tu respuesta debe seguir EXACTAMENTE esta estructura:

### **ANÁLISIS PRINCIPAL**

[Descripción general de los cambios detectados]

---

### **Propuesta de Commit #1**

```markdown
[prefijo](área - descripción breve)

[Descripción completa en castellano de QUÉ se logró y POR QUÉ]

<technical>
[Detalles técnicos específicos: archivos modificados, funciones añadidas, refactorizaciones, etc.]
</technical>

<changelog>
## [Tipo] [Emoji]
[Entrada para changelog de la app, optimizada para mostrar al usuario]
</changelog>
```

### **Propuesta de Commit #2** (solo si es necesario)

[Repetir formato anterior]

---

**DECISIÓN**: [Explicación breve de por qué uno o múltiples commits]



---

## INSTRUCCIONES FINALES

1. **Lee cuidadosamente** toda la información proporcionada
2. **Analiza el contexto** y los datos específicos
3. **Genera una respuesta** siguiendo EXACTAMENTE el formato especificado
4. **Mantén consistencia** en la estructura y sintaxis
5. **No desvíes** del formato requerido bajo ninguna circunstancia

**IMPORTANTE**: La respuesta debe ser parseada automáticamente. Cualquier desviación del formato especificado causará errores en el sistema.